/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package backyard.gui;

import model.backyard.*;
import java.awt.CardLayout;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTabbedPane;

/**
 *
 * @author picardi
 */
public class ScenarioPanel extends javax.swing.JPanel {

	private ScenarioSimulazione myScenario; //memorizza il GRASP controller delle operazioni che gestirà
	private BackYard owner;
	private Alloggio planimetria;
	private DefaultListModel<Piano> pianiListModel;
	private DefaultListModel<Stanza> stanzeListModel;
	private DefaultComboBoxModel<DispositivoIntelligente> dispositiviComboModel;
	private Contesto contesto;
	private String nomeContesto;

	/* BEGIN CHANGES 20.5 */
	private DispositivoPanel dispPanel;
	/* END CHANGES 20.5 */

	/**
	 * Creates new form ScenarioPanel
	 */
	public ScenarioPanel(BackYard by) {
		owner = by;
		initComponents();
		pianiListModel = new DefaultListModel<>();
		this.pianiList.setModel(pianiListModel);
		stanzeListModel = new DefaultListModel<>();
		this.stanzeList.setModel(stanzeListModel);
		dispositiviComboModel = new DefaultComboBoxModel<>();
		this.dispositiviCombo.setModel(dispositiviComboModel);

		/* BEGIN CHANGES 20.5 */
		dispPanel = new DispositivoPanel(owner);
		this.dispCP.add(dispPanel, "DettagliDisp");
		/* END CHANGES 20.5 */
	}

	/* Inizializza questo pannello con un dato Scenario di Simulazione
	 *
	 */
	public void setup(ScenarioSimulazione scen) {
		this.titleLabel.setText("Scenario corrente: " + scen.getNome());
		myScenario = scen;

		/* Setup dei controlli della vista in modo che riflettano i contenuti
		 * del nuovo scenario.
		 */
		/* @MODELINTERACTION la vista richiama sull'oggetto ScenarioSimulazione
		 * i seguenti metodi necessari alla visualizzazione:
		 * - getPiani(): ArrayList<Piano> (restituisce i piani nell' alloggio associato)
		 * - getDispositivi(): ArrayList<DispositivoIntelligente> (restituisce i dispositivi)
		 * - getPlanimetria(): Alloggio (restituisce la planimetria)
		 * Sia gli oggetti Piano che gli oggetti DispositivoIntelligente sono  poi visualizzati
		 * richiamando su di essi il metodo toString(), che quindi deve essere appropriatamente
		 * definito.
		 */
		ArrayList<Piano> piani = myScenario.getPiani();
		ArrayList<DispositivoIntelligente> dispositivi = myScenario.getDispositivi();
		planimetria = myScenario.getAlloggio();

		// Per default la finestra si apre sulla planimetria. 
		contesto = planimetria;
		nomeContesto = "alloggio";
		scenarioTabbed.setSelectedIndex(0);

		aggiornaElencoPiani(piani);
		aggiornaElencoDispositivi(dispositivi);

		// All'inizio nessun piano è selezionato
		((CardLayout) this.pianoP.getLayout()).show(pianoP, "Blank");
		this.eliminaPianoButton.setEnabled(false);
	}

	/* BEGIN CHANGES 20.5 */	
	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scenarioTabbed = new javax.swing.JTabbedPane();
        planimetriaPanel = new javax.swing.JPanel();
        javax.swing.JSplitPane planimetriaSplit = new javax.swing.JSplitPane();
        elencoPianiP = new javax.swing.JPanel();
        javax.swing.JScrollPane jScrollPane1 = new javax.swing.JScrollPane();
        pianiList = new javax.swing.JList();
        javax.swing.JPanel pianiSP = new javax.swing.JPanel();
        nuovoPianoButton = new javax.swing.JButton();
        eliminaPianoButton = new javax.swing.JButton();
        pianoP = new javax.swing.JPanel();
        blankPanel = new javax.swing.JPanel();
        editPianoP = new javax.swing.JPanel();
        javax.swing.JPanel datiPianoP = new javax.swing.JPanel();
        datiLabel = new javax.swing.JLabel();
        javax.swing.JPanel datiPianoEP = new javax.swing.JPanel();
        modificaDatiButton = new javax.swing.JButton();
        javax.swing.JPanel datiPianoCenterP = new javax.swing.JPanel();
        javax.swing.JScrollPane jScrollPane2 = new javax.swing.JScrollPane();
        stanzeList = new javax.swing.JList();
        javax.swing.JPanel stanzeSP = new javax.swing.JPanel();
        nuovaStanzaButton = new javax.swing.JButton();
        eliminaStanzaButton = new javax.swing.JButton();
        modificaStanzaButton = new javax.swing.JButton();
        spostaStanzaButton = new javax.swing.JButton();
        dispositiviPanel = new javax.swing.JPanel();
        dispNP = new javax.swing.JPanel();
        dispositiviCombo = new javax.swing.JComboBox();
        dispWP = new javax.swing.JPanel();
        nuovoDispButton = new javax.swing.JButton();
        modificaDispButton = new javax.swing.JButton();
        spostaDispButton = new javax.swing.JButton();
        eliminaDispButton = new javax.swing.JButton();
        duplicaDispButton = new javax.swing.JButton();
        dispCP = new javax.swing.JPanel();
        javax.swing.JPanel blankP = new javax.swing.JPanel();
        javax.swing.JPanel scenarioTitleP = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        javax.swing.JPanel scenarioTitleEP = new javax.swing.JPanel();
        chiudiButton = new javax.swing.JButton();
        salvaButton = new javax.swing.JButton();
        scenarioSP = new javax.swing.JPanel();
        importaButton = new javax.swing.JButton();
        risorseButton = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        scenarioTabbed.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                scenarioTabbedStateChanged(evt);
            }
        });

        planimetriaPanel.setLayout(new java.awt.BorderLayout());

        planimetriaSplit.setDividerLocation(250);

        elencoPianiP.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1), javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEtchedBorder(), javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2))));
        elencoPianiP.setLayout(new java.awt.BorderLayout());

        pianiList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        pianiList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                pianiListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(pianiList);

        elencoPianiP.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        nuovoPianoButton.setLabel("Nuovo...");
        nuovoPianoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuovoPianoButtonActionPerformed(evt);
            }
        });
        pianiSP.add(nuovoPianoButton);

        eliminaPianoButton.setText("Elimina");
        eliminaPianoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminaPianoButtonActionPerformed(evt);
            }
        });
        pianiSP.add(eliminaPianoButton);

        elencoPianiP.add(pianiSP, java.awt.BorderLayout.SOUTH);

        planimetriaSplit.setLeftComponent(elencoPianiP);

        pianoP.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1), javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEtchedBorder(), javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2))));
        pianoP.setLayout(new java.awt.CardLayout());

        javax.swing.GroupLayout blankPanelLayout = new javax.swing.GroupLayout(blankPanel);
        blankPanel.setLayout(blankPanelLayout);
        blankPanelLayout.setHorizontalGroup(
            blankPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 397, Short.MAX_VALUE)
        );
        blankPanelLayout.setVerticalGroup(
            blankPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 333, Short.MAX_VALUE)
        );

        pianoP.add(blankPanel, "Blank");

        editPianoP.setLayout(new java.awt.BorderLayout());

        datiPianoP.setBorder(javax.swing.BorderFactory.createEmptyBorder(3, 3, 3, 3));
        datiPianoP.setLayout(new java.awt.BorderLayout());

        datiLabel.setText("Scenario corrente: NOME");
        datiPianoP.add(datiLabel, java.awt.BorderLayout.WEST);

        modificaDatiButton.setLabel("Modifica...");
        modificaDatiButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificaDatiButtonActionPerformed(evt);
            }
        });
        datiPianoEP.add(modificaDatiButton);

        datiPianoP.add(datiPianoEP, java.awt.BorderLayout.EAST);

        editPianoP.add(datiPianoP, java.awt.BorderLayout.NORTH);

        datiPianoCenterP.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1), javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEtchedBorder(), javax.swing.BorderFactory.createEmptyBorder(4, 4, 4, 4))));
        datiPianoCenterP.setLayout(new java.awt.BorderLayout());

        stanzeList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        stanzeList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                stanzeListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(stanzeList);

        datiPianoCenterP.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        nuovaStanzaButton.setText("Nuova...");
        nuovaStanzaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuovaStanzaButtonActionPerformed(evt);
            }
        });
        stanzeSP.add(nuovaStanzaButton);

        eliminaStanzaButton.setText("Elimina");
        eliminaStanzaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminaStanzaButtonActionPerformed(evt);
            }
        });
        stanzeSP.add(eliminaStanzaButton);

        modificaStanzaButton.setText("Modifica...");
        modificaStanzaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificaStanzaButtonActionPerformed(evt);
            }
        });
        stanzeSP.add(modificaStanzaButton);

        spostaStanzaButton.setText("Sposta...");
        spostaStanzaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spostaStanzaButtonActionPerformed(evt);
            }
        });
        stanzeSP.add(spostaStanzaButton);

        datiPianoCenterP.add(stanzeSP, java.awt.BorderLayout.SOUTH);

        editPianoP.add(datiPianoCenterP, java.awt.BorderLayout.CENTER);

        pianoP.add(editPianoP, "EditPiano");

        planimetriaSplit.setRightComponent(pianoP);

        planimetriaPanel.add(planimetriaSplit, java.awt.BorderLayout.CENTER);

        scenarioTabbed.addTab("Planimetria", planimetriaPanel);

        dispositiviPanel.setLayout(new java.awt.BorderLayout());

        dispNP.setLayout(new java.awt.BorderLayout());

        dispositiviCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dispositiviComboActionPerformed(evt);
            }
        });
        dispNP.add(dispositiviCombo, java.awt.BorderLayout.CENTER);

        nuovoDispButton.setText("Nuovo...");
        nuovoDispButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuovoDispButtonActionPerformed(evt);
            }
        });
        dispWP.add(nuovoDispButton);

        modificaDispButton.setText("Rinomina...");
        modificaDispButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificaDispButtonActionPerformed(evt);
            }
        });
        dispWP.add(modificaDispButton);

        spostaDispButton.setText("Sposta...");
        spostaDispButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spostaDispButtonActionPerformed(evt);
            }
        });
        dispWP.add(spostaDispButton);

        eliminaDispButton.setText("Elimina");
        eliminaDispButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminaDispButtonActionPerformed(evt);
            }
        });
        dispWP.add(eliminaDispButton);

        duplicaDispButton.setText("Duplica...");
        duplicaDispButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                duplicaDispButtonActionPerformed(evt);
            }
        });
        dispWP.add(duplicaDispButton);

        dispNP.add(dispWP, java.awt.BorderLayout.NORTH);

        dispositiviPanel.add(dispNP, java.awt.BorderLayout.NORTH);

        dispCP.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10), javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED), javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5))));
        dispCP.setLayout(new java.awt.CardLayout());

        javax.swing.GroupLayout blankPLayout = new javax.swing.GroupLayout(blankP);
        blankP.setLayout(blankPLayout);
        blankPLayout.setHorizontalGroup(
            blankPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 634, Short.MAX_VALUE)
        );
        blankPLayout.setVerticalGroup(
            blankPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 247, Short.MAX_VALUE)
        );

        dispCP.add(blankP, "Blank");

        dispositiviPanel.add(dispCP, java.awt.BorderLayout.CENTER);

        scenarioTabbed.addTab("Dispositivi", dispositiviPanel);

        add(scenarioTabbed, java.awt.BorderLayout.CENTER);

        scenarioTitleP.setBorder(javax.swing.BorderFactory.createEmptyBorder(3, 3, 3, 3));
        scenarioTitleP.setLayout(new java.awt.BorderLayout());

        titleLabel.setText("Scenario corrente: NOME");
        scenarioTitleP.add(titleLabel, java.awt.BorderLayout.WEST);

        chiudiButton.setText("Chiudi");
        chiudiButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chiudiButtonActionPerformed(evt);
            }
        });
        scenarioTitleEP.add(chiudiButton);

        salvaButton.setText("Salva");
        salvaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salvaButtonActionPerformed(evt);
            }
        });
        scenarioTitleEP.add(salvaButton);

        scenarioTitleP.add(scenarioTitleEP, java.awt.BorderLayout.EAST);

        add(scenarioTitleP, java.awt.BorderLayout.NORTH);

        importaButton.setText("Importa...");
        importaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importaButtonActionPerformed(evt);
            }
        });
        scenarioSP.add(importaButton);

        risorseButton.setText("Risorse...");
        risorseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                risorseButtonActionPerformed(evt);
            }
        });
        scenarioSP.add(risorseButton);

        add(scenarioSP, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents
	/* END CHANGES 20.5 */
	
    private void chiudiButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chiudiButtonActionPerformed
		/* @MODELINTERACTION per verificare se può chiudere tranquillamente,
		 * la vista chiama sull'oggetto ScenarioSimulazione il seguente metodo:
		 * - isSalvato(): boolean
		 * che restituisce il valore della variabile di istanza 'salvato'
		 */
		int option = JOptionPane.YES_OPTION;
		if (!myScenario.getSalvato()) {
			option = JOptionPane.showConfirmDialog(this.owner, "Sicuro di voler chiudere? \nCi sono informazioni non salvate.",
				"Attenzione", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
		}
		if (option == JOptionPane.YES_OPTION) // se era gia' salvato o se l'utente ha detto si'
		{
			/* BEGIN CHANGES 19.5 */
			owner.chiudiScenario(evt);
			/* ENDCHANGES 19.5 */
		}
    }//GEN-LAST:event_chiudiButtonActionPerformed

    private void modificaDatiButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificaDatiButtonActionPerformed
		// Ottiene il Piano selezionato, di cui vanno modificati i dati
		Piano piano = (Piano) this.pianiList.getSelectedValue();

		// Chiede il  nome e il livello (e' possibile che l'utente prema cancel rinunciando all'operazione)
		/* @MODELINTERACTION per inizializzare i dati della dialog di richiesta,
		 * la vista richiama sull'oggetto Piano i seguenti metodi 
		 * - getNome(): String
		 * - getLivello(): int
		 */
		String nome = piano.getNome();
		int livello = piano.getLivello();
		DatiPianoDialog dia = new DatiPianoDialog(this.owner);
		dia.setNome(nome);
		dia.setLivello(livello);
		dia.setVisible(true);

		if (dia.getValue() == JOptionPane.OK_OPTION) { // L'utente ha premuto Ok

			// Ottiene il nome inserito
			nome = dia.getNome();

			// Ottiene il livello inserito
			livello = dia.getLivello();

			if (nome.length() > 0) { // Il nome inserito e' non vuoto
				/* @OPERATIONmodificaPiano
				 * in base a come si è gestito il caso di nome o livello non valido, bisogna o catturare
				 * l'eccezione o verificare il valore restituito dall'operazione. In ogni
				 * caso si può mostrare una message dialog analoga a quella che qui viene visualizzata quando l'utente
				 * non inserisce NESSUN NOME.
				 */

				// @EXAMPLES T2/T3:
				// Piano p = BackYardCtrl.modificaPiano(piano, nome, livello);
				// boolean modified = myScenario.modificaPiano(piano, nome, livello);
                                boolean modified= myScenario.modificaPiano(piano, nome, livello);

				if (modified) // Alternative: se NON viene lanciata alcuna eccezione, o se il piano restituito è NON null
				{
					/* @MODELINTERACTION la vista richiama sull'oggetto ScenarioSimulazione
					 * il seguente metodo necessario al proprio aggiornamento 
					 * - getPiani(): ArrayList<Piano>
					 */
					ArrayList<Piano> piani = myScenario.getPiani();
					this.aggiornaElencoPiani(piani);

					// Seleziona il piano appema modificato
					this.pianiList.setSelectedValue(piano, true);
				} else { // Alternative: se viene lanciata una eccezione o se il piano restituito è null
					JOptionPane.showMessageDialog(this, "Nome o livello del piano non disponibile", "Errore", JOptionPane.ERROR_MESSAGE);
				}

			} else { // Il nome inserito e' vuoto
				JOptionPane.showMessageDialog(this, "Nome piano non valido", "Errore", JOptionPane.ERROR_MESSAGE);
			}
		}
    }//GEN-LAST:event_modificaDatiButtonActionPerformed

    private void pianiListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_pianiListValueChanged
		if (!evt.getValueIsAdjusting()) {
			// Ottiene l'indice selezionato nell'elenco dei piani
			int sel = pianiList.getSelectedIndex();

			// Abilita o disabilita il pulsante di eliminazione a seconda che ci sia 
			// un piano selezionato o meno
			this.eliminaPianoButton.setEnabled(sel >= 0);
			if (sel < 0) { // Caso in cui nulla è selezionato: il lato destro è della finestra appare vuoto
				((CardLayout) this.pianoP.getLayout()).show(pianoP, "Blank");
			} else { // Caso in cui c'e' un piano selezionato
				// Ottiene l'oggetto selezionato nell'elenco
				Piano selP = (Piano) pianiList.getSelectedValue();

				/* @MODELINTERACTION
				 * La vista richiama sull'oggetto Piano i seguenti metodi necessari a visualizzarne i dettagli:
				 * - getNome(): String
				 * - getLivello(): int
				 * - getStanze(): ArrayList<Stanza>				
				 */
				ArrayList<Stanza> stanze = selP.getStanze();
				String nome = selP.getNome();
				int livello = selP.getLivello();

				// Imposta il lato destro della finestra in modo che visualizzi le informazioni del piano selezionato
				this.datiLabel.setText(nome + ", Livello: " + livello);
				aggiornaElencoStanze(stanze);

				// All'inizio nessuna stanza e' selezionata, quindi i pulsanti relativi sono disabilitati
				this.eliminaStanzaButton.setEnabled(false);
				this.modificaStanzaButton.setEnabled(false);
				this.spostaStanzaButton.setEnabled(false);

				// Mostra il pannello con le informazioni del piano selezionato
				((CardLayout) this.pianoP.getLayout()).show(pianoP, "EditPiano");
			}

		}
    }//GEN-LAST:event_pianiListValueChanged

    private void eliminaPianoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminaPianoButtonActionPerformed
		// Ottiene oggetto selezionato nell'elenco
		Piano p = (Piano) pianiList.getSelectedValue();

		/* @OPERATIONeliminaPiano
		 * in base a come si è gestito il caso di piano che non si può eliminare, bisogna o catturare
		 * l'eccezione o verificare il valore restituito dall'operazione. Qui in caso di valore restituito
		 * pari a false (piano non eliminabile) viene visualizzato un messaggio di errore.		
		 */
		// @EXAMPLES T2/T3:
		// boolean eliminato = BackYardCtrl.eliminaPiano(p);
		 boolean eliminato = myScenario.eliminaPiano(p.getNome());

		// Aggiornamento view
		if (eliminato) {
			/* @MODELINTERACTION la vista richiama sull'oggetto ScenarioSimulazione
			 * il seguente metodo necessario al proprio aggiornamento 
			 * - getPiani(): ArrayList<Piano>
			 */
			ArrayList<Piano> piani = myScenario.getPiani();
			this.aggiornaElencoPiani(piani);
		} else {
			// Caso in cui il piano non è elimiminabile
			JOptionPane.showMessageDialog(this, "Non si può eliminare questo piano", "Errore", JOptionPane.ERROR_MESSAGE);
		}
    }//GEN-LAST:event_eliminaPianoButtonActionPerformed

    private void nuovoPianoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuovoPianoButtonActionPerformed
		// Chiede il  nome e il livello (e' possibile che l'utente prema cancel rinunciando all'operazione)
		DatiPianoDialog dia = new DatiPianoDialog(this.owner);
		dia.setVisible(true);

		if (dia.getValue() == JOptionPane.OK_OPTION) { // L'utente ha premuto Ok

			// Ottiene il nome inserito
			String nome = dia.getNome();

			// Ottiene il livello inserito
			int livello = dia.getLivello();

			if (nome.length() > 0) { // Il nome inserito e' non vuoto
				/* @OPERATIONaggiungiPiano
				 * in base a come si è gestito il caso di nome o livello non valido, bisogna o catturare
				 * l'eccezione o verificare il valore restituito dall'operazione. In ogni
				 * caso si può mostrare una message dialog analoga a quella che qui viene visualizzata quando l'utente
				 * non inserisce NESSUN NOME.
				 */

				// @EXAMPLES T2/T3:
				// Piano p = BackYardCtrl.aggiungiPiano(nome, livello);
				// Piano p = myScenario.aggiungiPiano(nome, livello);
                                Piano p= myScenario.aggiungiPiano(nome, livello);

				if (p != null) // Alternativamente: se NON viene lanciata alcuna eccezione
				{
					/* @MODELINTERACTION la vista richiama sull'oggetto ScenarioSimulazione
					 * il seguente metodo necessario al proprio aggiornamento 
					 * - getPiani(): ArrayList<Piano>
					 */
					ArrayList<Piano> piani = myScenario.getPiani();
					this.aggiornaElencoPiani(piani);
				} else { // ALternativamente: se viene lanciata una eccezine
					JOptionPane.showMessageDialog(this, "Nome o livello del piano non disponibile", "Errore", JOptionPane.ERROR_MESSAGE);
				}

			} else { // Il nome inserito e' vuoto
				JOptionPane.showMessageDialog(this, "Nome piano non valido", "Errore", JOptionPane.ERROR_MESSAGE);
			}
		}
    }//GEN-LAST:event_nuovoPianoButtonActionPerformed

    private void stanzeListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_stanzeListValueChanged
		if (!evt.getValueIsAdjusting()) {
			int sel = stanzeList.getSelectedIndex();
			this.eliminaStanzaButton.setEnabled(sel >= 0);
			this.modificaStanzaButton.setEnabled(sel >= 0);
			this.spostaStanzaButton.setEnabled(sel >= 0);
		}
    }//GEN-LAST:event_stanzeListValueChanged

    private void salvaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salvaButtonActionPerformed
		/* @MODELINTERACTION per verificare se c'e' qualcosa da salvare,
		 * la vista chiama sull'oggetto ScenarioSimulazione il seguente metodo:
		 * - isSalvato(): boolean
		 * che restituisce il valore della variabile di istanza 'salvato'
		 */
		if (myScenario.getSalvato()) {
			JOptionPane.showMessageDialog(this.owner, "Nulla di nuovo da salvare.",
				"Informazione", JOptionPane.INFORMATION_MESSAGE);
		} else {
			/* @OPERATIONsalvaScenario
			 */
			// @EXAMPLES T2/T3:
			// BackYardCtrl.salvaScenario();
			BackYardApplicationController.getAppController().salvaScenario();
		}
    }//GEN-LAST:event_salvaButtonActionPerformed

    private void nuovaStanzaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuovaStanzaButtonActionPerformed
		// Chiede il  nome (e' possibile che l'utente prema cancel rinunciando all'operazione)
		NomeStanzaDialog dia = new NomeStanzaDialog(this.owner);
		dia.setVisible(true);

		if (dia.getValue() == JOptionPane.OK_OPTION) { // L'utente ha premuto Ok

			// Ottiene il nome inserito
			String nome = dia.getNome();

			if (nome.length() > 0) { // Il nome inserito e' non vuoto

				// Determina il piano a cui aggiungere la stanza
				Piano piano = (Piano) pianiList.getSelectedValue();
				
				/* @OPERATIONaggiungiStanza
				 * in base a come si è gestito il caso di nome non valido, bisogna o catturare
				 * l'eccezione o verificare il valore restituito dall'operazione. In ogni
				 * caso si può mostrare una message dialog analoga a quella che qui viene visualizzata quando l'utente
				 * non inserisce NESSUN NOME.
				 */

				// @EXAMPLES T2/T3:
				// Stanza s = BackYardCtrl.aggiungiStanza(piano, nome);
				Stanza s = myScenario.aggiungiStanza(piano, nome);

				if (s != null) // Alternativamente: se NON viene lanciata alcuna eccezione
				{
					/* @MODELINTERACTION la vista richiama sull'oggetto Piano
					 * il seguente metodo necessario al proprio aggiornamento 
					 * - getStanze(): ArrayList<Stanza>
					 */
					ArrayList<Stanza> stanze = piano.getStanze();
					this.aggiornaElencoStanze(stanze);
				} else { // ALternativamente: se viene lanciata una eccezione
					JOptionPane.showMessageDialog(this, "Nome non disponibile", "Errore", JOptionPane.ERROR_MESSAGE);
				}

			} else { // Il nome inserito e' vuoto
				JOptionPane.showMessageDialog(this, "Nome stanza non valido", "Errore", JOptionPane.ERROR_MESSAGE);
			}
		}
    }//GEN-LAST:event_nuovaStanzaButtonActionPerformed

    private void eliminaStanzaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminaStanzaButtonActionPerformed
		// Ottiene stanza selezionata nell'elenco
		Stanza s = (Stanza) stanzeList.getSelectedValue();

		/* @OPERATIONeliminaStanza
		 * in base a come si è gestito il caso di stanza che non si può eliminare, bisogna o catturare
		 * l'eccezione o verificare il valore restituito dall'operazione. Qui in caso di valore restituito
		 * pari a false (piano non eliminabile) viene visualizzato un messaggio di errore.		
		 */
		// @EXAMPLES T2/T3:
		// boolean eliminato = BackYardCtrl.eliminaStanza(s);		
		boolean eliminato = myScenario.eliminaStanza(s);

		// Aggiornamento view
		if (eliminato) {
			/* @MODELINTERACTION la vista richiama sull'oggetto Piano
			 * attualmente selezionato
			 * il seguente metodo necessario al proprio aggiornamento 
			 * - getStanze(): ArrayList<Stanza>
			 */

			// Ottiene il piano selezionato
			Piano p = (Piano) pianiList.getSelectedValue();
			ArrayList<Stanza> stanze = p.getStanze();
			this.aggiornaElencoStanze(stanze);

		} else {
			// Caso in cui il piano non è elimiminabile
			JOptionPane.showMessageDialog(this, "Non si può eliminare questa stanza", "Errore", JOptionPane.ERROR_MESSAGE);
		}
    }//GEN-LAST:event_eliminaStanzaButtonActionPerformed

    private void modificaStanzaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificaStanzaButtonActionPerformed
		// Chiede il  nome (e' possibile che l'utente prema cancel rinunciando all'operazione)
		NomeStanzaDialog dia = new NomeStanzaDialog(this.owner);
		dia.setVisible(true);

		if (dia.getValue() == JOptionPane.OK_OPTION) { // L'utente ha premuto Ok

			// Ottiene il nome inserito
			String nome = dia.getNome();

			if (nome.length() > 0) { // Il nome inserito e' non vuoto

				// Ottiene la stanza selezionata
				Stanza stanza = (Stanza) stanzeList.getSelectedValue();
				/* @OPERATIONmodificaStanza
				 * in base a come si è gestito il caso di nome non valido, bisogna o catturare
				 * l'eccezione o verificare il valore restituito dall'operazione. In ogni
				 * caso si può mostrare una message dialog analoga a quella che qui viene visualizzata quando l'utente
				 * non inserisce NESSUN NOME.
				 */

				// @EXAMPLES T2/T3:
				// boolean modificato = BackYardCtrl.modificaStanza(stanza,nome);
				boolean modificato = myScenario.modificaStanza(stanza, nome);

				if (modificato) // Alternativamente: se NON viene lanciata alcuna eccezione
				{
					/* @MODELINTERACTION la vista richiama sull'oggetto Piano
					 * attualmente selezionato
					 * il seguente metodo necessario al proprio aggiornamento 
					 * - getStanze(): ArrayList<Stanza>
					 */
					// Ottiene il piano selezionato
					Piano p = (Piano) pianiList.getSelectedValue();
					ArrayList<Stanza> stanze = p.getStanze();
					this.aggiornaElencoStanze(stanze);

				} else { // ALternativamente: se viene lanciata una eccezione
					JOptionPane.showMessageDialog(this, "Nome non disponibile", "Errore", JOptionPane.ERROR_MESSAGE);
				}

			} else { // Il nome inserito e' vuoto
				JOptionPane.showMessageDialog(this, "Nome stanza non valido", "Errore", JOptionPane.ERROR_MESSAGE);
			}
		}
    }//GEN-LAST:event_modificaStanzaButtonActionPerformed

    private void spostaStanzaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spostaStanzaButtonActionPerformed
		// Inizializza la finestra per la richiesta del nuovo piano
		SceltaPianoDialog dia = new SceltaPianoDialog(this.owner);
		dia.setPiani(pianiList.getModel());

		// Chiede il  piano (e' possibile che l'utente prema cancel rinunciando all'operazione)
		dia.setVisible(true);

		if (dia.getValue() == JOptionPane.OK_OPTION) { // L'utente ha premuto Ok

			// Ottiene il piano scelto
			Piano piano = (Piano) dia.getSelectedObject();

			// Ottiene la stanza selezionata
			Stanza stanza = (Stanza) stanzeList.getSelectedValue();
			/* @OPERATIONspostaStanza
			 * in base a come si è gestito il caso di spostamento non possibile, bisogna o catturare
			 * l'eccezione o verificare il valore restituito dall'operazione
			 */

			// @EXAMPLES T2/T3:
			// boolean spostato = BackYardCtrl.spostaStanza(stanza.getPiano(), stanza, piano);
			boolean spostato = myScenario.spostaStanza(stanza, piano);

			if (spostato) // Alternativamente: se NON viene lanciata alcuna eccezione
			{
				//La vista si aggiorna selezionando il nuovo piano su cui e' stata messa la stanza
				pianiList.clearSelection();
				pianiList.setSelectedValue(piano, true);

			} else { // ALternativamente: se viene lanciata una eccezione
				JOptionPane.showMessageDialog(this, "Spostamento non possibile", "Errore", JOptionPane.ERROR_MESSAGE);
			}

		}
    }//GEN-LAST:event_spostaStanzaButtonActionPerformed

    private void importaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importaButtonActionPerformed
		UserInfo uInfo = myScenario.getInfoScenario().getAutore();
                ArrayList<InfoScenario> scenari = null;
                try {
                    scenari = BackYardApplicationController.getAppController().OttieniScenariDiSimulazione(uInfo);
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, "Impossibile Connettersi al DB", "Errore", JOptionPane.ERROR_MESSAGE);                    
                }
		// Mostra una finestra in cui scegliere lo scenario da cui importare (l'utente può premere Cancel)
		DefaultListModel<InfoScenario> lm = new DefaultListModel<>();
		for (InfoScenario sc : scenari) {
			lm.addElement(sc);
		}

		SceltaScenarioDialog dia = new SceltaScenarioDialog(this.owner);
		dia.setScenari(lm);
		dia.setVisible(true);

		if (dia.getValue() == JOptionPane.OK_OPTION) // L'utente ha premuto Ok
		{
			// Ottieni lo scenario prescelto
			InfoScenario daScenario = (InfoScenario) dia.getSelectedObject();

			/* @OPERATIONottieniElementiImportabili
			 * Attenzione: nella GUI il contesto viene mantenuto tramite due variabili
			 * di istanza
			 * 1) "contesto" (di tipo Contesto), che è uguale o all'Alloggio dello Scenario, o a uno
			 * dei Dispositivi, o a null se l'utente sta visualizzando i dispositivi ma 
			 * non ce n'è ancora nessuno.
			 * 2) "nomeContesto" (di tipo String), che è "alloggio" o "dispositivo" a seconda del tab
			 * selezionato.
			 * L'esempio qui di seguito usa la (1) ma, in base all'implementazione fatta di 
			 * ottieniElementiImportabili, si può scegliere di usare la (2)
			 */
			// @EXAMPLES T2/T3	
			// ArrayList<Importabile> elenco = BackYardCtrl.ottieniElementiImportabili(daScenario, nomeContesto);
			ArrayList<Importabile> elenco = BackYardApplicationController.getAppController().ottieniElementiImportabili(daScenario, contesto);

			// Mostra una finestra in cui scegliere l'elemento da importare (l'utente può premere Cancel)
			DefaultListModel<Importabile> implm = new DefaultListModel<>();
			for (Importabile imp : elenco) {
				implm.addElement(imp);
			}

			SceltaImportabileDialog impdia = new SceltaImportabileDialog(this.owner);
			impdia.setImportabili(implm);
			impdia.setVisible(true);

			if (impdia.getValue() == JOptionPane.OK_OPTION) // L'utente ha premuto Ok
			{
				//Ottieni l'elemento prescelto:
				Importabile imp = (Importabile) impdia.getSelectedObject();

				/* @OPERATIONimporta
				 * in base a come si è gestito il caso di import non possibile, bisogna o catturare
				 * l'eccezione o verificare il valore restituito dall'operazione				
				 */
				// @EXAMPLES T2/T3	
				// boolean importato = BackYardCtrl.importa(imp, nomeContesto);
				 boolean importato = BackYardApplicationController.getAppController().importa(daScenario, myScenario, imp);

				if (importato) // Alternativamente: se NON viene lanciata alcuna eccezione
				{
					// se il contesto è l'alloggio, aggiorna l'elenco dei piani
					if (nomeContesto.equals("alloggio")) {
						/* @MODELINTERACTION la vista richiama sull'oggetto ScenarioSimulazione
						 * il seguente metodo necessario al proprio aggiornamento 
						 * - getPiani(): ArrayList<Piano>
						 */
						ArrayList<Piano> piani = myScenario.getPiani();
						this.aggiornaElencoPiani(piani);
					} else { // se il contesto è il dispositivo, aggiorna l'elenco dei dispositivi
						/* @MODELINTERACTION la vista richiama sull'oggetto ScenarioSimulazione
						 * il seguente metodo necessario al proprio aggiornamento 
						 * - getDispositivi(): ArrayList<DispositivoIntelligente>
						 */
						ArrayList<DispositivoIntelligente> disp = myScenario.getDispositivi();
						this.aggiornaElencoDispositivi(disp);
					}

				} else { // ALternativamente: se viene lanciata una eccezione
					JOptionPane.showMessageDialog(this, "Elemento non importabile", "Errore", JOptionPane.ERROR_MESSAGE);
				}

			}
		}
    }//GEN-LAST:event_importaButtonActionPerformed

    private void scenarioTabbedStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_scenarioTabbedStateChanged
		/* Questa operazione imposta la variabile contesto 
		 * all'Alloggio o al DispositivoIntelligente attualmente selezionato.
		 * ATTENZIONE che il contesto potrebbe anche essere null (se sono
		 * sul tab "Dispositivi" ma non c'è alcun dispositivo da selezionare)
		 */
		int tabIndex = ((JTabbedPane) evt.getSource()).getSelectedIndex();
		String tabName = ((JTabbedPane) evt.getSource()).getTitleAt(tabIndex);
		if (tabName.equals("Planimetria")) {
			contesto = planimetria;
			nomeContesto = "alloggio";
		} else {
			int dispIndex = this.dispositiviCombo.getSelectedIndex();
			if (dispIndex < 0) {
				contesto = null;
			} else {
				contesto = (DispositivoIntelligente) this.dispositiviCombo.getSelectedItem();
			}
			nomeContesto = "dispositivo";
		}
    }//GEN-LAST:event_scenarioTabbedStateChanged

    private void risorseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_risorseButtonActionPerformed
		GestioneRisorseDialog dia = new GestioneRisorseDialog(this.owner);
		dia.setup(myScenario, contesto, nomeContesto);
		dia.setVisible(true);
    }//GEN-LAST:event_risorseButtonActionPerformed

    private void dispositiviComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dispositiviComboActionPerformed
		int tabIndex = this.scenarioTabbed.getSelectedIndex();
		String tabName = this.scenarioTabbed.getTitleAt(tabIndex);
		/* BEGIN CHANGES 20.5 */
		if (tabName.equals("Dispositivi")) {
			Object o = this.dispositiviCombo.getSelectedItem();
			if (o == null) {
				contesto = null;
				((CardLayout) this.dispCP.getLayout()).show(dispCP, "Blank");
			} else {
				contesto = (Contesto) o;
				this.dispPanel.setup(myScenario, (DispositivoIntelligente) o);
				((CardLayout) this.dispCP.getLayout()).show(dispCP, "DettagliDisp");
			}
			aggiornaPulsantiDispositivi();
		}
		/* END CHANGES 20.5 */
    }//GEN-LAST:event_dispositiviComboActionPerformed

	/* BEGIN CHANGES 20.5 */
    private void nuovoDispButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuovoDispButtonActionPerformed
		// Chiede il  nome (e' possibile che l'utente prema cancel rinunciando all'operazione)
		NomeDispositivoDialog dia = new NomeDispositivoDialog(this.owner);
		dia.setVisible(true);

		if (dia.getValue() == JOptionPane.OK_OPTION) { // L'utente ha premuto Ok

			// Ottiene il nome inserito
			String nome = dia.getNome();

			if (nome.length() > 0) { // Il nome inserito e' non vuoto˙
				/* @OPERATIONcreaDispositivo
				 * in base a come si è gestito il caso di nome non valido, bisogna o catturare
				 * l'eccezione o verificare il valore restituito dall'operazione				
				 */

				// @EXAMPLES T2/T3	
				// boolean aggiunto = BackYardCtrl.creaDispositivo(nome);
				boolean aggiunto = myScenario.creaDispositivo(nome);
				if (aggiunto) // Alternativamente: se NON viene lanciata alcuna eccezione o l'oggetto e' stato creato
				{
					/* @MODELINTERACTION la vista richiama sull'oggetto ScenarioSimulazione
					 * il seguente metodo necessario al proprio aggiornamento 
					 * - getDispositivi(): ArrayList<Stanza>
					 * e sugli oggetti DispositivoIntelligente
					 * - getNome(): String
					 */
					ArrayList<DispositivoIntelligente> disp = myScenario.getDispositivi();
					this.aggiornaElencoDispositivi(disp);

					for (DispositivoIntelligente d : disp) {
						if (d.getNome().equals(nome)) {
							this.dispositiviCombo.setSelectedItem(d);
                                                        d.setDove(planimetria);
							break;
						}
					}
				} else { // ALternativamente: se viene lanciata una eccezione o nessun oggetto e' stato creato
					JOptionPane.showMessageDialog(this, "Nome non disponibile", "Errore", JOptionPane.ERROR_MESSAGE);
				}
			} else { // ALternativamente: se viene lanciata una eccezione o nessun oggetto e' stato creato
				JOptionPane.showMessageDialog(this, "Nome non valido", "Errore", JOptionPane.ERROR_MESSAGE);
			}
		}
    }//GEN-LAST:event_nuovoDispButtonActionPerformed

    private void modificaDispButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificaDispButtonActionPerformed
		// Chiede il  nome (e' possibile che l'utente prema cancel rinunciando all'operazione)
		NomeDispositivoDialog dia = new NomeDispositivoDialog(this.owner);
		dia.setVisible(true);

		if (dia.getValue() == JOptionPane.OK_OPTION) { // L'utente ha premuto Ok

			// Ottiene il nome inserito
			String nome = dia.getNome();

			if (nome.length() > 0) { // Il nome inserito e' non vuoto

				// Ottiene il dispositivo selezionato
				DispositivoIntelligente disp = (DispositivoIntelligente) this.dispositiviCombo.getSelectedItem();
				/* @OPERATIONmodificaDispositivo
				 * in base a come si è gestito il caso di nome non valido, bisogna o catturare
				 * l'eccezione o verificare il valore restituito dall'operazione. In ogni
				 * caso si può mostrare una message dialog analoga a quella che qui viene visualizzata quando l'utente
				 * non inserisce NESSUN NOME.
				 */

				// @EXAMPLES T2/T3:
				// boolean modificato = BackYardCtrl.modificaDispositivo(disp,nome);
				boolean modificato = myScenario.modificaDispositivo(disp.getNome(), nome);

				if (modificato) // Alternativamente: se NON viene lanciata alcuna eccezione
				{
					/* @MODELINTERACTION la vista richiama sull'oggetto ScenarioSimulazione
					 * il seguente metodo necessario al proprio aggiornamento 
					 * - getDispositivi(): ArrayList<DispositivoIntelligente>
					 */
					ArrayList<DispositivoIntelligente> dispositivi = myScenario.getDispositivi();
					this.aggiornaElencoDispositivi(dispositivi);
					this.dispositiviCombo.setSelectedItem(disp);

				} else { // ALternativamente: se viene lanciata una eccezione
					JOptionPane.showMessageDialog(this, "Nome non disponibile", "Errore", JOptionPane.ERROR_MESSAGE);
				}

			} else { // Il nome inserito e' vuoto
				JOptionPane.showMessageDialog(this, "Nome dispositivo non valido", "Errore", JOptionPane.ERROR_MESSAGE);
			}
		}
    }//GEN-LAST:event_modificaDispButtonActionPerformed

    private void eliminaDispButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminaDispButtonActionPerformed
		// Ottiene oggetto selezionato nell'elenco
		DispositivoIntelligente disp = (DispositivoIntelligente) dispositiviCombo.getSelectedItem();

		/* @OPERATIONeliminaDispositivo
		 * in base a come si è gestito il caso di dispositivo che non si può eliminare, bisogna o catturare
		 * l'eccezione o verificare il valore restituito dall'operazione. Qui in caso di valore restituito
		 * pari a false (dispositivo non eliminabile) viene visualizzato un messaggio di errore.		
		 */
		// @EXAMPLES T2/T3:
		// boolean eliminato = BackYardCtrl.eliminaDispositivo(disp.getNome());
		boolean eliminato = myScenario.eliminaDispositivo(disp.getNome());

		// Aggiornamento view
		if (eliminato) {
			/* @MODELINTERACTION la vista richiama sull'oggetto ScenarioSimulazione
			 * il seguente metodo necessario al proprio aggiornamento 
			 * - getDispositivi(): ArrayList<DispositivoIntelligente>
			 */
			ArrayList<DispositivoIntelligente> dispositivi = myScenario.getDispositivi();
			this.aggiornaElencoDispositivi(dispositivi);
		} else {
			// Caso in cui il piano non è elimiminabile
			JOptionPane.showMessageDialog(this, "Non si può eliminare questo dispositivo", "Errore", JOptionPane.ERROR_MESSAGE);
		}
    }//GEN-LAST:event_eliminaDispButtonActionPerformed

    private void duplicaDispButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_duplicaDispButtonActionPerformed
		// Chiede il  nome per il nuovo dispositivo (e' possibile che l'utente prema cancel rinunciando all'operazione)
		NomeDispositivoDialog dia = new NomeDispositivoDialog(this.owner);
		dia.setVisible(true);

		if (dia.getValue() == JOptionPane.OK_OPTION) { // L'utente ha premuto Ok

			// Ottiene il nome inserito
			String nome = dia.getNome();

			if (nome.length() > 0) { // Il nome inserito e' non vuoto˙

				// Ottiene il dispositivo da duplicare
				DispositivoIntelligente toDup = (DispositivoIntelligente) dispositiviCombo.getSelectedItem();
				/* @OPERATIONduplicaDispositivo
				 * in base a come si è gestito il caso di nome non valido, bisogna o catturare
				 * l'eccezione o verificare il valore restituito dall'operazione				
				 */

				// @EXAMPLES T2/T3	
				// boolean duplicato = BackYardCtrl.duplicaDispositivo(toDup.getNome(), nome);
				 boolean duplicato = myScenario.duplicaDispositivo(toDup.getNome(), nome);
				if (duplicato) // Alternativamente: se NON viene lanciata alcuna eccezione 
				{
					/* @MODELINTERACTION la vista richiama sull'oggetto ScenarioSimulazione
					 * il seguente metodo necessario al proprio aggiornamento 
					 * - getDispositivi(): ArrayList<Stanza>
					 * e sugli oggetti DispositivoIntelligente
					 * - getNome(): String
					 */
					ArrayList<DispositivoIntelligente> disp = myScenario.getDispositivi();
					this.aggiornaElencoDispositivi(disp);

					for (DispositivoIntelligente d : disp) {
						if (d.getNome().equals(nome)) {
							this.dispositiviCombo.setSelectedItem(d);
							break;
						}
					}
				} else { // ALternativamente: se viene lanciata una eccezione o nessun oggetto e' stato creato
					JOptionPane.showMessageDialog(this, "Duplicazione non disponibile", "Errore", JOptionPane.ERROR_MESSAGE);
				}
			} else { // ALternativamente: se viene lanciata una eccezione o nessun oggetto e' stato creato
				JOptionPane.showMessageDialog(this, "Nome non valido", "Errore", JOptionPane.ERROR_MESSAGE);
			}
		}
    }//GEN-LAST:event_duplicaDispButtonActionPerformed

    private void spostaDispButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spostaDispButtonActionPerformed
		/* @OPERATIONrichiediCollocazioniPerDispositivo
		 */

		//@EXAMPLES T2/T3:
		// ArrayList<Collocazione> colloc = BackYardCtrl.richiediCollocazioniPerDispositivo();
		ArrayList<Luogo> luoghi = myScenario.richiediCollocazionePerDispositivo();

		// Visualizza la finestra per scegliere una collocazione
		SceltaCollocazioneDialog dia = new SceltaCollocazioneDialog(this.owner);
		DefaultListModel<Luogo> lm = new DefaultListModel<>();
		for (Luogo l : luoghi) {
			lm.addElement(l);
		}
		dia.setCollocazioni(lm);
		dia.setVisible(true);

		if (dia.getValue() == JOptionPane.OK_OPTION) { // L'utente ha premuto Ok

			// Ottiene la collocazione scelta
			Collocazione c = (Collocazione) dia.getSelectedObject();

			// Ottiene il dispositivo selezionato
			DispositivoIntelligente disp = (DispositivoIntelligente) this.dispositiviCombo.getSelectedItem();

			/* @OPERATIONassegnaCollocazione
			 * in base a come si è gestito il caso di spostamento non possibile, bisogna o catturare
			 * l'eccezione o verificare il valore restituito dall'operazione
			 */
			//@EXAMPLES T2/T3:
			// boolean spostato = BackYardCtrl.assegnaCollocazione(disp, c);
			boolean spostato = myScenario.assegnaCollocazione(disp, (Luogo)c);

			if (spostato) // Alternativamente: se NON viene lanciata alcuna eccezione
			{
				// La visualizzazione dei dispositivi si aggiorna

				/* @MODELINTERACTION la vista richiama sull'oggetto ScenarioSimulazione
				 * il seguente metodo necessario al proprio aggiornamento 
				 * - getDispositivi(): ArrayList<DispositivoIntelligente>
				 */
				ArrayList<DispositivoIntelligente> dispositivi = myScenario.getDispositivi();
				this.aggiornaElencoDispositivi(dispositivi);
				this.dispositiviCombo.setSelectedItem(disp);

			} else { // ALternativamente: se viene lanciata una eccezione
				JOptionPane.showMessageDialog(this, "Spostamento non possibile", "Errore", JOptionPane.ERROR_MESSAGE);
			}

		} 
    }//GEN-LAST:event_spostaDispButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel blankPanel;
    private javax.swing.JButton chiudiButton;
    private javax.swing.JLabel datiLabel;
    private javax.swing.JPanel dispCP;
    private javax.swing.JPanel dispNP;
    private javax.swing.JPanel dispWP;
    private javax.swing.JComboBox dispositiviCombo;
    private javax.swing.JPanel dispositiviPanel;
    private javax.swing.JButton duplicaDispButton;
    private javax.swing.JPanel editPianoP;
    private javax.swing.JPanel elencoPianiP;
    private javax.swing.JButton eliminaDispButton;
    private javax.swing.JButton eliminaPianoButton;
    private javax.swing.JButton eliminaStanzaButton;
    private javax.swing.JButton importaButton;
    private javax.swing.JButton modificaDatiButton;
    private javax.swing.JButton modificaDispButton;
    private javax.swing.JButton modificaStanzaButton;
    private javax.swing.JButton nuovaStanzaButton;
    private javax.swing.JButton nuovoDispButton;
    private javax.swing.JButton nuovoPianoButton;
    private javax.swing.JList pianiList;
    private javax.swing.JPanel pianoP;
    private javax.swing.JPanel planimetriaPanel;
    private javax.swing.JButton risorseButton;
    private javax.swing.JButton salvaButton;
    private javax.swing.JPanel scenarioSP;
    private javax.swing.JTabbedPane scenarioTabbed;
    private javax.swing.JButton spostaDispButton;
    private javax.swing.JButton spostaStanzaButton;
    private javax.swing.JList stanzeList;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables

	/* END CHANGES 20.5 */
	
	private void aggiornaElencoPiani(ArrayList<Piano> piani) {
		this.pianiListModel.removeAllElements();
		for (Piano p : piani) {
			this.pianiListModel.addElement(p);
		}

		this.pianiList.clearSelection();
	}

	private void aggiornaElencoStanze(ArrayList<Stanza> stanze) {
		this.stanzeListModel.removeAllElements();
		for (Stanza p : stanze) {
			this.stanzeListModel.addElement(p);
		}

		this.stanzeList.clearSelection();
	}

	private void aggiornaElencoDispositivi(ArrayList<DispositivoIntelligente> dispositivi) {
		this.dispositiviComboModel.removeAllElements();
		for (DispositivoIntelligente di : dispositivi) {
			this.dispositiviComboModel.addElement(di);
		}

		/* BEGIN CHANGES 20.5 */
		if (this.dispositiviComboModel.getSize() > 0) {
			this.dispositiviCombo.setSelectedIndex(0);
			if (contesto != planimetria) {
				contesto = (DispositivoIntelligente) dispositiviCombo.getSelectedItem();
			}
			((CardLayout) this.dispCP.getLayout()).show(dispCP, "DettagliDisp");
			dispPanel.setup(myScenario, ((DispositivoIntelligente)this.dispositiviCombo.getSelectedItem()));
		} else {
			((CardLayout) this.dispCP.getLayout()).show(dispCP, "Blank");
			if (contesto != planimetria) {
				contesto = null;
			}
		}
		aggiornaPulsantiDispositivi();
		/* END CHANGES 20.5 */
	}

	/* BEGIN CHANGES 20.5 */
	private void aggiornaPulsantiDispositivi() {
		boolean sel = (this.dispositiviCombo.getSelectedIndex() >= 0);
		this.nuovoDispButton.setEnabled(true);
		this.modificaDispButton.setEnabled(sel);
		this.spostaDispButton.setEnabled(sel);
		this.eliminaDispButton.setEnabled(sel);
		this.duplicaDispButton.setEnabled(sel);
	}
	/* END CHANGES 20.5 */
}
