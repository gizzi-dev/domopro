/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package backyard.gui;

import model.backyard.*;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTabbedPane;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableCellEditor;

/**
 *
 * @author picardi
 */
public class DispositivoPanel extends javax.swing.JPanel {

	static class Utilizzo {

		private Risorsa ris;
		private double val;

		Utilizzo(Map.Entry<Risorsa, Double> utilizzo) {
			ris = utilizzo.getKey();
			val = utilizzo.getValue();
		}

		public String toString() {
			return ris.getNome() + ", consumo: " + val;
		}
	}

	/* BEGIN CHANGES 29.5 */	
	
	class EventiTableModel extends AbstractTableModel {

		private ArrayList<Evento> eventi;

		EventiTableModel(ArrayList<Evento> eventi) {
			this.eventi = eventi;
		}

		@Override
		public int getRowCount() {
			return eventi.size();
		}

		@Override
		public int getColumnCount() {
			return 2;
		}

		@Override
		public Object getValueAt(int rowIndex, int columnIndex) {
			if (columnIndex == 0) {
				return eventi.get(rowIndex);
			}
			if (columnIndex == 1) {
				return eventi.get(rowIndex).isAbilitato();
			}
			return null;
		}

		@Override
		public Class getColumnClass(int columnIndex) {
			if (columnIndex == 0) {
				return Evento.class;
			}
			if (columnIndex == 1) {
				return Boolean.class;
			}
			return Object.class;
		}

		@Override
		public String getColumnName(int columnIndex) {
			if (columnIndex == 0) {
				return "Evento";
			}
			if (columnIndex == 1) {
				return "Abilitato";
			}
			return super.getColumnName(columnIndex);
		}

		@Override
		public boolean isCellEditable(int rowIndex, int columnIndex) {
			switch (columnIndex) {
				case 0:
					return false;
				case 1:
					return true;
				default:
					return false;
			}
		}

		@Override
		public void setValueAt(Object val, int rowIndex, int columnIndex) {
			if (columnIndex != 1) {
				return;
			}

			/* @OPERATIONimpostaAbilitazione
			 */
			// @EXAMPLES T2/T3:
			// BackYardCtrl.impostaAbilitazione(eventi.get(rowIndex), (Boolean) val);				
			myDispositivo.impostaAbilitazione(eventi.get(rowIndex), (Boolean) val);
		}
	}
	
	/* BEGIN CHANGES 29.5 */	
	

	private BackYard owner;
	private ScenarioSimulazione myScenario;
	private DispositivoIntelligente myDispositivo;
	private DefaultListModel<Azione> azioniListModel;
	private DefaultListModel<DispositivoPanel.Utilizzo> utilizzoListModel;
	private DefaultListModel<Azione> sottoazioniListModel;
	
	/* BEGIN CHANGES 29.5 */	
	
	private DefaultListModel<DispositivoIntelligente> sottodispListModel;
	private EventiTableModel eventiTableModel;

	/* END CHANGES 29.5 */	

	
	/**
	 * Creates new form DispositivoPanel
	 */
	public DispositivoPanel(BackYard owner) {
		initComponents();
		
	/* BEGIN CHANGES 29.5 */	
		
		this.azioniListModel = new DefaultListModel<>();
		this.utilizzoListModel = new DefaultListModel<>();
		this.sottoazioniListModel = new DefaultListModel<>();
		this.sottodispListModel = new DefaultListModel<>();
		this.azioniList.setModel(azioniListModel);
		this.utilizzoList.setModel(utilizzoListModel);
		this.sottoAzioniList.setModel(sottoazioniListModel);		
		this.sottodispList.setModel(sottodispListModel);
		this.owner = owner;
		
	/* END CHANGES 29.5 */	

		
	}
	

	public void setup(ScenarioSimulazione scen, DispositivoIntelligente disp) {
		myScenario = scen;
		myDispositivo = disp;
		this.dispTabbed.setSelectedIndex(0);
		aggiornaElencoAzioni();
	}

	/* BEGIN CHANGES 29.5 */	
	
	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dispTabbed = new javax.swing.JTabbedPane();
        javax.swing.JPanel azioniPanel = new javax.swing.JPanel();
        javax.swing.JPanel azioniLeftP = new javax.swing.JPanel();
        javax.swing.JScrollPane jScrollPane1 = new javax.swing.JScrollPane();
        azioniList = new javax.swing.JList();
        azioniBP = new javax.swing.JPanel();
        nuovaAzioneButton = new javax.swing.JButton();
        eliminaAzioneButton = new javax.swing.JButton();
        azioniRightP = new javax.swing.JPanel();
        javax.swing.JPanel blankP = new javax.swing.JPanel();
        javax.swing.JPanel azioneP = new javax.swing.JPanel();
        azioneDettagliP = new javax.swing.JPanel();
        azioneLabel = new javax.swing.JLabel();
        modificaAzioneButton = new javax.swing.JButton();
        dettagliAzioneSP = new javax.swing.JPanel();
        durataLabel = new javax.swing.JLabel();
        modificaDurataButton = new javax.swing.JButton();
        javax.swing.JPanel azioneCP = new javax.swing.JPanel();
        javax.swing.JPanel azioneRisorseP = new javax.swing.JPanel();
        javax.swing.JScrollPane jScrollPane2 = new javax.swing.JScrollPane();
        utilizzoList = new javax.swing.JList();
        risorseUtilizzateBP = new javax.swing.JPanel();
        aggiungiUtilizzoButton = new javax.swing.JButton();
        rimuoviUtilizzoButton = new javax.swing.JButton();
        azioneMacroP = new javax.swing.JPanel();
        javax.swing.JPanel sottoAzNP = new javax.swing.JPanel();
        diComplessoLabel = new javax.swing.JLabel();
        macroCheck = new javax.swing.JCheckBox();
        javax.swing.JScrollPane jScrollPane4 = new javax.swing.JScrollPane();
        sottoAzioniList = new javax.swing.JList();
        javax.swing.JPanel macroSP = new javax.swing.JPanel();
        aggiungiSottoAzButton = new javax.swing.JButton();
        eliminaSottoAzButton = new javax.swing.JButton();
        suSottoAzButton = new javax.swing.JButton();
        giuSottoAzButton = new javax.swing.JButton();
        javax.swing.JPanel eventiSottodispPanel = new javax.swing.JPanel();
        eventiPanel = new javax.swing.JPanel();
        javax.swing.JScrollPane jScrollPane5 = new javax.swing.JScrollPane();
        eventiTable = new javax.swing.JTable();
        javax.swing.JPanel sottoDispPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        sottodispList = new javax.swing.JList();
        javax.swing.JPanel sottodispSP = new javax.swing.JPanel();
        aggiungiSottodispButton = new javax.swing.JButton();
        eliminaSottodispButton = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        dispTabbed.setPreferredSize(new java.awt.Dimension(0, 0));
        dispTabbed.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                dispTabbedStateChanged(evt);
            }
        });

        azioniPanel.setLayout(new java.awt.GridLayout(1, 2));

        azioniLeftP.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 0, 5));
        azioniLeftP.setMinimumSize(new java.awt.Dimension(0, 0));
        azioniLeftP.setPreferredSize(new java.awt.Dimension(0, 0));
        azioniLeftP.setLayout(new java.awt.BorderLayout());

        azioniList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        azioniList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                azioniListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(azioniList);

        azioniLeftP.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        nuovaAzioneButton.setText("Nuova...");
        nuovaAzioneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuovaAzioneButtonActionPerformed(evt);
            }
        });
        azioniBP.add(nuovaAzioneButton);

        eliminaAzioneButton.setText("Elimina");
        eliminaAzioneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminaAzioneButtonActionPerformed(evt);
            }
        });
        azioniBP.add(eliminaAzioneButton);

        azioniLeftP.add(azioniBP, java.awt.BorderLayout.SOUTH);

        azioniPanel.add(azioniLeftP);

        azioniRightP.setLayout(new java.awt.CardLayout());

        blankP.setPreferredSize(new java.awt.Dimension(399, 412));

        javax.swing.GroupLayout blankPLayout = new javax.swing.GroupLayout(blankP);
        blankP.setLayout(blankPLayout);
        blankPLayout.setHorizontalGroup(
            blankPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 389, Short.MAX_VALUE)
        );
        blankPLayout.setVerticalGroup(
            blankPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 512, Short.MAX_VALUE)
        );

        azioniRightP.add(blankP, "Blank");

        azioneP.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEmptyBorder(0, 5, 0, 5), javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEtchedBorder(), javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5))));
        azioneP.setPreferredSize(new java.awt.Dimension(389, 380));
        azioneP.setLayout(new java.awt.BorderLayout());

        azioneDettagliP.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        azioneDettagliP.setLayout(new java.awt.BorderLayout());

        azioneLabel.setText("Descr azione");
        azioneDettagliP.add(azioneLabel, java.awt.BorderLayout.CENTER);

        modificaAzioneButton.setText("Modifica...");
        modificaAzioneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificaAzioneButtonActionPerformed(evt);
            }
        });
        azioneDettagliP.add(modificaAzioneButton, java.awt.BorderLayout.EAST);

        dettagliAzioneSP.setLayout(new java.awt.BorderLayout());

        durataLabel.setText("Durata pred");
        dettagliAzioneSP.add(durataLabel, java.awt.BorderLayout.CENTER);

        modificaDurataButton.setText("Modifica...");
        modificaDurataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificaDurataButtonActionPerformed(evt);
            }
        });
        dettagliAzioneSP.add(modificaDurataButton, java.awt.BorderLayout.EAST);

        azioneDettagliP.add(dettagliAzioneSP, java.awt.BorderLayout.SOUTH);

        azioneP.add(azioneDettagliP, java.awt.BorderLayout.NORTH);

        azioneCP.setPreferredSize(new java.awt.Dimension(365, 400));
        azioneCP.setLayout(new java.awt.GridLayout(2, 1));

        azioneRisorseP.setBorder(javax.swing.BorderFactory.createTitledBorder("Risorse utilizzate"));
        azioneRisorseP.setPreferredSize(new java.awt.Dimension(272, 78));
        azioneRisorseP.setLayout(new java.awt.BorderLayout());

        jScrollPane2.setPreferredSize(new java.awt.Dimension(260, 75));

        utilizzoList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        utilizzoList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                utilizzoListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(utilizzoList);

        azioneRisorseP.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        aggiungiUtilizzoButton.setText("Aggiungi...");
        aggiungiUtilizzoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aggiungiUtilizzoButtonActionPerformed(evt);
            }
        });
        risorseUtilizzateBP.add(aggiungiUtilizzoButton);

        rimuoviUtilizzoButton.setText("Rimuovi");
        rimuoviUtilizzoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rimuoviUtilizzoButtonActionPerformed(evt);
            }
        });
        risorseUtilizzateBP.add(rimuoviUtilizzoButton);

        azioneRisorseP.add(risorseUtilizzateBP, java.awt.BorderLayout.PAGE_END);

        azioneCP.add(azioneRisorseP);

        azioneMacroP.setBorder(javax.swing.BorderFactory.createTitledBorder("Sottoazioni"));
        azioneMacroP.setLayout(new java.awt.BorderLayout());

        sottoAzNP.setLayout(new java.awt.GridLayout(2, 1));

        diComplessoLabel.setText("DI semplice o complesso");
        diComplessoLabel.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 5, 0, 0));
        sottoAzNP.add(diComplessoLabel);

        macroCheck.setText("Macroazione");
        macroCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                macroCheckActionPerformed(evt);
            }
        });
        sottoAzNP.add(macroCheck);

        azioneMacroP.add(sottoAzNP, java.awt.BorderLayout.NORTH);

        sottoAzioniList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        sottoAzioniList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                sottoAzioniListValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(sottoAzioniList);

        azioneMacroP.add(jScrollPane4, java.awt.BorderLayout.CENTER);

        macroSP.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 5));

        aggiungiSottoAzButton.setText("Aggiungi...");
        aggiungiSottoAzButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aggiungiSottoAzButtonActionPerformed(evt);
            }
        });
        macroSP.add(aggiungiSottoAzButton);

        eliminaSottoAzButton.setText("Elimina");
        eliminaSottoAzButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminaSottoAzButtonActionPerformed(evt);
            }
        });
        macroSP.add(eliminaSottoAzButton);

        suSottoAzButton.setText("Su");
        suSottoAzButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                suSottoAzButtonActionPerformed(evt);
            }
        });
        macroSP.add(suSottoAzButton);

        giuSottoAzButton.setText("Giù");
        giuSottoAzButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                giuSottoAzButtonActionPerformed(evt);
            }
        });
        macroSP.add(giuSottoAzButton);

        azioneMacroP.add(macroSP, java.awt.BorderLayout.PAGE_END);

        azioneCP.add(azioneMacroP);

        azioneP.add(azioneCP, java.awt.BorderLayout.CENTER);

        azioniRightP.add(azioneP, "DettagliAzione");

        azioniPanel.add(azioniRightP);

        dispTabbed.addTab("Azioni", azioniPanel);

        eventiSottodispPanel.setPreferredSize(new java.awt.Dimension(0, 0));
        eventiSottodispPanel.setLayout(new java.awt.GridLayout(1, 2));

        eventiPanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 3), javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder(null, "Eventi", javax.swing.border.TitledBorder.LEADING, javax.swing.border.TitledBorder.DEFAULT_POSITION), javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5))));
        eventiPanel.setPreferredSize(new java.awt.Dimension(0, 0));
        eventiPanel.setLayout(new java.awt.BorderLayout());

        eventiTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Evento", "Abilitato"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(eventiTable);

        eventiPanel.add(jScrollPane5, java.awt.BorderLayout.CENTER);

        eventiSottodispPanel.add(eventiPanel);

        sottoDispPanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEmptyBorder(5, 3, 5, 5), javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder(null, "Sottodispositivi", javax.swing.border.TitledBorder.TRAILING, javax.swing.border.TitledBorder.DEFAULT_POSITION), javax.swing.BorderFactory.createEmptyBorder(5, 5, 0, 5))));
        sottoDispPanel.setLayout(new java.awt.BorderLayout());

        sottodispList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        sottodispList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                sottodispListValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(sottodispList);

        sottoDispPanel.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        sottodispSP.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 3));

        aggiungiSottodispButton.setText("Aggiungi...");
        aggiungiSottodispButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aggiungiSottodispButtonActionPerformed(evt);
            }
        });
        sottodispSP.add(aggiungiSottodispButton);

        eliminaSottodispButton.setText("Elimina");
        eliminaSottodispButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminaSottodispButtonActionPerformed(evt);
            }
        });
        sottodispSP.add(eliminaSottodispButton);

        sottoDispPanel.add(sottodispSP, java.awt.BorderLayout.PAGE_END);

        eventiSottodispPanel.add(sottoDispPanel);

        dispTabbed.addTab("Eventi e Sottodispositivi", eventiSottodispPanel);

        add(dispTabbed, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

	/* END CHANGES 29.5 */	
	
	
    private void azioniListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_azioniListValueChanged
		if (!evt.getValueIsAdjusting()) {
			if (this.azioniList.getSelectedIndex() >= 0) // qualcosa e' selezionato
			{
				Azione azione = (Azione) this.azioniList.getSelectedValue();
				aggiornaPannelloAzione(azione);
				this.eliminaAzioneButton.setEnabled(true);
				((CardLayout) this.azioniRightP.getLayout()).show(azioniRightP, "DettagliAzione");

			} else // nulla e' selezionato
			{
				this.eliminaAzioneButton.setEnabled(false);
				((CardLayout) this.azioniRightP.getLayout()).show(azioniRightP, "Blank");
			}
		}
    }//GEN-LAST:event_azioniListValueChanged

    private void utilizzoListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_utilizzoListValueChanged
		if (!evt.getValueIsAdjusting()) {
			boolean something = (this.utilizzoList.getSelectedIndex() >= 0);
			this.rimuoviUtilizzoButton.setEnabled(something);
		}
    }//GEN-LAST:event_utilizzoListValueChanged

    private void sottoAzioniListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_sottoAzioniListValueChanged
		if (!evt.getValueIsAdjusting()) {
			boolean something = (this.sottoAzioniList.getSelectedIndex() >= 0);
			this.eliminaSottoAzButton.setEnabled(something);
			this.suSottoAzButton.setEnabled(something);
			this.giuSottoAzButton.setEnabled(something);
		}
    }//GEN-LAST:event_sottoAzioniListValueChanged

    private void nuovaAzioneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuovaAzioneButtonActionPerformed
		// Chiede il  nome e la programmabilita' (e' possibile che l'utente prema cancel rinunciando all'operazione)
		DatiAzioneDialog dia = new DatiAzioneDialog(this.owner);
		dia.setVisible(true);

		if (dia.getValue() == JOptionPane.OK_OPTION) { // L'utente ha premuto Ok

			// Ottiene il nome inserito
			String nome = dia.getNome();

			if (nome.length() > 0) { // Il nome inserito e' non vuoto

				boolean programmabile = dia.getProgrammabile();

				/* @OPERATIONcreaNuovaAzione
				 * in base a come si è gestito il caso di nomenon valido, bisogna o catturare
				 * l'eccezione o verificare il valore restituito dall'operazione. In ogni
				 * caso si può mostrare una message dialog analoga a quella che qui viene visualizzata quando l'utente
				 * non inserisce NESSUN NOME.
				 */
				// @EXAMPLES T2/T3:
				// AzioneSemplice aggiunta = BackYardCtrl.creaNuovaAzione(nome);
				boolean aggiunta = myDispositivo.creaNuovaAzione(nome);

				if (aggiunta) // Alternativamente: se NON viene lanciata alcuna eccezione o l'oggetto e' stato creato
				{
					/* @MODELINTERACTION la vista richiama sull'oggetto DispositivoIntelligente
					 * il seguente metodo necessario al proprio aggiornamento 
					 * - getAzioni(): ArrayList<Azione>
					 * e sugli oggetti Azione
					 * - getNome(): String
					 * - setProgrammabile(boolean): void 
					 */
					this.aggiornaElencoAzioni();
					ArrayList<Azione> az = myDispositivo.getAzioni();

					for (Azione a : az) {
						if (a.getNome().equals(nome)) {
							a.setProgrammabile(programmabile);
							this.azioniList.setSelectedValue(a, true);
							break;
						}
					}
				} else { // ALternativamente: se viene lanciata una eccezione o nessun oggetto e' stato creato
					JOptionPane.showMessageDialog(this, "Nome non disponibile", "Errore", JOptionPane.ERROR_MESSAGE);
				}

			} else { // Il nome inserito e' vuoto
				JOptionPane.showMessageDialog(this, "Nome azione non valido", "Errore", JOptionPane.ERROR_MESSAGE);
			}
		}
    }//GEN-LAST:event_nuovaAzioneButtonActionPerformed

    private void eliminaAzioneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminaAzioneButtonActionPerformed
		// Ottiene azione selezionata nell'elenco
		Azione a = (Azione) this.azioniList.getSelectedValue();

		/* @MODELINTERACTION la vista richiama sull'oggetto Azione
		 * attualmente selezionato
		 * il seguente metodo necessario al proprio aggiornamento 
		 * - getNome(): String
		 */
		String nomeAzione = a.getNome();
		/* @OPERATIONeliminaAzione
		 * in base a come si è gestito il caso di azione che non si può eliminare, bisogna o catturare
		 * l'eccezione o verificare il valore restituito dall'operazione. Qui in caso di valore restituito
		 * pari a false (azione non eliminabile) viene visualizzato un messaggio di errore.		
		 */
		// @EXAMPLES T2/T3:
		// boolean eliminato = BackYardCtrl.eliminaStanza(s);		
		 boolean eliminata = this.myDispositivo.eliminaAzione(nomeAzione);

		// Aggiornamento view
		if (eliminata) {
			/* @MODELINTERACTION la vista richiama sull'oggetto Piano
			 * attualmente selezionato
			 * il seguente metodo necessario al proprio aggiornamento 
			 * - getStanze(): ArrayList<Stanza>
			 */

			// Ottiene il piano selezionato
			this.aggiornaElencoAzioni();

		} else {
			// Caso in cui il piano non è elimiminabile
			JOptionPane.showMessageDialog(this, "Non si può eliminare questa azione", "Errore", JOptionPane.ERROR_MESSAGE);
		}

    }//GEN-LAST:event_eliminaAzioneButtonActionPerformed

    private void modificaAzioneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificaAzioneButtonActionPerformed
		/* @MODELINTERACTION la vista richiama sull'oggetto Azione
		 * i seguenti metodi necessario al proprio aggiornamento 
		 * - getNome(): String
		 * - isProgrammabile(): boolean
		 */
		Azione a = (Azione) this.azioniList.getSelectedValue();

		// Chiede il  nome e la programmabilita' (e' possibile che l'utente prema cancel rinunciando all'operazione)
		DatiAzioneDialog dia = new DatiAzioneDialog(this.owner);
		dia.setNome(a.getNome());
		dia.setProgrammabile(a.isProgrammabile());
		dia.setVisible(true);

		if (dia.getValue() == JOptionPane.OK_OPTION) { // L'utente ha premuto Ok

			// Ottiene il nome inserito
			String nome = dia.getNome();

			if (nome.length() > 0) { // Il nome inserito e' non vuoto

				boolean programmabile = dia.getProgrammabile();

				/* @OPERATIONmodificaAzione
				 * in base a come si è gestito il caso di nomenon valido, bisogna o catturare
				 * l'eccezione o verificare il valore restituito dall'operazione. In ogni
				 * caso si può mostrare una message dialog analoga a quella che qui viene visualizzata quando l'utente
				 * non inserisce NESSUN NOME.
				 */
				// @EXAMPLES T2/T3:
				// boolean modificata = BackYardCtrl.modificaAzione(a, nome, programmabile);
				 boolean modificata = myDispositivo.modificaAzione(a, nome, programmabile);

				if (modificata) // Alternativamente: se NON viene lanciata alcuna eccezione o l'oggetto e' stato creato
				{
					this.aggiornaElencoAzioni();
					this.azioniList.setSelectedValue(a, true);

				} else { // ALternativamente: se viene lanciata una eccezione o nessun oggetto e' stato creato
					JOptionPane.showMessageDialog(this, "Nome non disponibile", "Errore", JOptionPane.ERROR_MESSAGE);
				}

			} else { // Il nome inserito e' vuoto
				JOptionPane.showMessageDialog(this, "Nome azione non valido", "Errore", JOptionPane.ERROR_MESSAGE);
			}
		}
    }//GEN-LAST:event_modificaAzioneButtonActionPerformed

    private void modificaDurataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificaDurataButtonActionPerformed
		/* @MODELINTERACTION la vista richiama sull'oggetto Azione
		 * i seguenti metodi necessario al proprio aggiornamento 
		 * - getDurata(): int
		 */
		Azione a = (Azione) this.azioniList.getSelectedValue();
		int durata = a.getDurata();

		// Chiede la durata (e' possibile che l'utente prema cancel rinunciando all'operazione)
		DurataAzioneDialog dia = new DurataAzioneDialog(this.owner);
		dia.setPredefinita((durata >= 0));
		dia.setDurata(durata);
		dia.setVisible(true);

		if (dia.getValue() == JOptionPane.OK_OPTION) { // L'utente ha premuto Ok

			boolean pred = dia.getPredefinita();
			durata = (pred ? dia.getDurata() : -1);

			/* @OPERATIONimpostaDurata
			 * in base a come si è gestito il caso di modifica non possibile, bisogna o catturare
			 * l'eccezione o verificare il valore restituito dall'operazione. 
			 */
			// @EXAMPLES T2/T3:
			// boolean modificata = BackYardCtrl.impostaDurata(a, durata);
			 boolean modificata = myDispositivo.impostaDurata(a, durata);

			if (modificata) // Alternativamente: se NON viene lanciata alcuna eccezione o l'oggetto e' stato creato
			{
				String durataStr = (durata < 0 ? "Durata non predef." : "Durata: " + durata + " sec.");
				this.durataLabel.setText(durataStr);
			} else { // ALternativamente: se viene lanciata una eccezione o nessun oggetto e' stato creato
				JOptionPane.showMessageDialog(this, "Modifica non possibile", "Errore", JOptionPane.ERROR_MESSAGE);
			}

		}
    }//GEN-LAST:event_modificaDurataButtonActionPerformed

    private void aggiungiUtilizzoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aggiungiUtilizzoButtonActionPerformed
		Azione azione = (Azione) this.azioniList.getSelectedValue();

		/* @OPERATIONrichiediRisorseAccessibili
		 */
		// @EXAMPLES T2/T3:
		// ArrayList<Risorsa> ris = BackYardCtrl.richiediRisorseAccessibili(azione);
		 ArrayList<Risorsa> ris = this.myDispositivo.richiediRisorseAccessibili(azione);

		DefaultListModel<Risorsa> lm = new DefaultListModel<>();
		for (Risorsa r : ris) {
			lm.addElement(r);
		}

		UtilizzoRisorsaDialog dia = new UtilizzoRisorsaDialog(this.owner);
		dia.setRisorse(lm);
		dia.setVisible(true);

		if (dia.getValue() == JOptionPane.OK_OPTION) { // L'utente ha premuto Ok

			// Ottiene la risorsa inserita
			Risorsa r = (Risorsa) dia.getSelectedObject();

			double consumo = dia.getConsumo();

			/* @OPERATIONaggiungiUtilizzoRisorsa
			 */
			// @EXAMPLES T2/T3:
			// BackYardCtrl.aggiungiUtilizzoRisorsa(azione, r, consumo);
			myDispositivo.aggiungiUtilizzoRisorsa(azione, r, consumo);
			this.aggiornaElencoUtilizzo(azione);

			for (int i = 0; i < this.utilizzoListModel.getSize(); i++) {
				Utilizzo u = this.utilizzoListModel.getElementAt(i);
				if (u.ris.equals(r) && u.val == consumo) {
					this.utilizzoList.setSelectedIndex(i);
					break;
				}
			}
		}
    }//GEN-LAST:event_aggiungiUtilizzoButtonActionPerformed

    private void rimuoviUtilizzoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rimuoviUtilizzoButtonActionPerformed
		Utilizzo u = (Utilizzo) this.utilizzoList.getSelectedValue();
		Azione azione = (Azione) this.azioniList.getSelectedValue();

		/* @OPERATIONeliminaUtilizzoRisorsa
		 */
		// @EXAMPLES T2/T3:
		// BackYardCtrl.eliminaUtilizzoRisorsa(azione, r);
		 myDispositivo.eliminaUtilizzoRisorsa(azione, u.ris);

		this.aggiornaElencoUtilizzo(azione);
    }//GEN-LAST:event_rimuoviUtilizzoButtonActionPerformed

    private void macroCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_macroCheckActionPerformed
		boolean macro = this.macroCheck.isSelected();
		Azione azione = (Azione) this.azioniList.getSelectedValue();

		/* @OPERATIONimpostaMacroazione
		 */
		// @EXAMPLES T2/T3:
		// BackYardCtrl.eliminaUtilizzoRisorsa(azione, r);	
		 boolean ok = myDispositivo.impostaMacroazione(azione, macro);

		if (!ok) {
			JOptionPane.showMessageDialog(this, "Modifica non possibile", "Errore", JOptionPane.ERROR_MESSAGE);
		} else {
			this.aggiornaElencoSottoazioni(azione);
			this.aggiungiSottoAzButton.setEnabled(macro);
			this.sottoAzioniList.setEnabled(macro);
                        this.aggiornaElencoAzioni();
                       // this.azioniList.setSelectedValue(this.myDispositivo.richiediDettagliAzione(azione.getNome()),true);
		}

    }//GEN-LAST:event_macroCheckActionPerformed

    private void aggiungiSottoAzButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aggiungiSottoAzButtonActionPerformed
		Azione azione = (Azione) this.azioniList.getSelectedValue();

		SceltaAzioneDialog dia = new SceltaAzioneDialog(this.owner);

		/* @OPERATIONrichiediSottoazioniDisponibili
		 */
		// @EXAMPLES T2/T3:
		// ArrayList<Azione> azioni = BackYardCtrl.richiediSottoazioniDisponibili(azione);
		ArrayList<Azione> azioni = this.myDispositivo.richiediSottoazioniDisponibili(azione);

		DefaultListModel<Azione> lm = new DefaultListModel<>();
		for (Azione a : azioni) {
			lm.addElement(a);
		}
		dia.setAzioni(lm);
		dia.setVisible(true);

		if (dia.getValue() == JOptionPane.OK_OPTION) // L'utente ha premuto ok
		{

			Azione sottoaz = (Azione) dia.getSelectedObject();
			/* @OPERATIONaggiungiSottoazione
			 * in base a come si è gestito il caso di aggiunta non possibile, bisogna o catturare
			 * l'eccezione o verificare il valore restituito dall'operazione. 
			 */
			// @EXAMPLES T2/T3:
			// boolean aggiunta = BackYardCtrl.aggiungiSottoazione(azione, sottoaz);
			boolean aggiunta = this.myDispositivo.aggiungiSottoazione(azione, sottoaz);

			if (aggiunta) {
				this.aggiornaElencoSottoazioni(azione);
				this.sottoAzioniList.setSelectedValue(sottoaz, true);
			} else {
				JOptionPane.showMessageDialog(this, "Aggiunta non possibile", "Errore", JOptionPane.ERROR_MESSAGE);
			}
		}
    }//GEN-LAST:event_aggiungiSottoAzButtonActionPerformed

    private void eliminaSottoAzButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminaSottoAzButtonActionPerformed
		Azione azione = (Azione) this.azioniList.getSelectedValue();
		Azione sottoaz = (Azione) this.sottoAzioniList.getSelectedValue();

		/* @OPERATIONeliminaSottoazione
		 * in base a come si è gestito il caso di eliminazione non possibile, bisogna o catturare
		 * l'eccezione o verificare il valore restituito dall'operazione. 
		 */
		// @EXAMPLES T2/T3:
		// boolean elim = BackYardCtrl.eliminaSottoazione(azione, sottoaz);	
		boolean elim = this.myDispositivo.eliminaSottoazione(azione, sottoaz);

		if (elim) {
			this.aggiornaElencoSottoazioni(azione);
		} else {
			JOptionPane.showMessageDialog(this, "Eliminazione non possibile", "Errore", JOptionPane.ERROR_MESSAGE);
		}
    }//GEN-LAST:event_eliminaSottoAzButtonActionPerformed

    private void suSottoAzButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suSottoAzButtonActionPerformed
		modificaPosizioneSottoazione(-1);
    }//GEN-LAST:event_suSottoAzButtonActionPerformed

    private void giuSottoAzButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_giuSottoAzButtonActionPerformed
		modificaPosizioneSottoazione(1);
    }//GEN-LAST:event_giuSottoAzButtonActionPerformed

	/* BEGIN CHANGES 29.5 */	

    private void dispTabbedStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_dispTabbedStateChanged
		int tabIndex = ((JTabbedPane) evt.getSource()).getSelectedIndex();
		if (tabIndex == 1) {
			// L'utente ha selezionato il tab Eventi & Sottodispositivi
			// Qui predispongo sia l'UC Configurare eventi che l'UC Gestire Sottodispositivi

			aggiornaTabellaEventi();

			aggiornaElencoSottodispositivi();
		}
    }//GEN-LAST:event_dispTabbedStateChanged

    private void sottodispListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_sottodispListValueChanged
        if (!evt.getValueIsAdjusting())
		{
			this.eliminaSottodispButton.setEnabled(this.sottodispList.getSelectedIndex() >= 0);
		}
    }//GEN-LAST:event_sottodispListValueChanged

    private void aggiungiSottodispButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aggiungiSottodispButtonActionPerformed
		SceltaDispositivoDialog dia = new SceltaDispositivoDialog(this.owner);

		/* @OPERATIONrichiediDispositiviUsabili
		 */
		// @EXAMPLES T2/T3:
		// ArrayList<Azione> azioni = BackYardCtrl.richiediSottoazioniDisponibili(azione);
                
		ArrayList<DispositivoIntelligente> usabili = this.myScenario.richiediDispositiviUsabili(myDispositivo);

		DefaultListModel<DispositivoIntelligente> lm = new DefaultListModel<>();
		for (DispositivoIntelligente a : usabili) {
			lm.addElement(a);
		}
		dia.setDispositivi(lm);
		dia.setVisible(true);

		if (dia.getValue() == JOptionPane.OK_OPTION) // L'utente ha premuto ok
		{

			DispositivoIntelligente comp = (DispositivoIntelligente) dia.getSelectedObject();
			/* @OPERATIONaggiungiComponente
			 * in base a come si è gestito il caso di aggiunta non possibile, bisogna o catturare
			 * l'eccezione o verificare il valore restituito dall'operazione. 
			 */
			// @EXAMPLES T2/T3:
			// BackYardCtrl.aggiungiComponente(comp); boolean aggiunta = true;
			boolean aggiunta = this.myScenario.aggiungiComponente(myDispositivo, comp);
			if (aggiunta) {
				this.aggiornaElencoSottodispositivi();
				this.sottodispList.setSelectedValue(comp, true);
			} else {
				JOptionPane.showMessageDialog(this, "Aggiunta non possibile", "Errore", JOptionPane.ERROR_MESSAGE);
			}
		}
    }//GEN-LAST:event_aggiungiSottodispButtonActionPerformed

    private void eliminaSottodispButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminaSottodispButtonActionPerformed
		DispositivoIntelligente di = (DispositivoIntelligente) this.sottodispList.getSelectedValue();

		/* @OPERATIONeliminaComponente
		 * in base a come si è gestito il caso di eliminazione non possibile, bisogna o catturare
		 * l'eccezione o verificare il valore restituito dall'operazione. 
		 */
		// @EXAMPLES T2/T3:
		// boolean elim = BackYardCtrl.eliminaComponente(di);
		boolean elim = this.myScenario.eliminaComponente(this.myDispositivo, di);

		if (elim) {
			this.aggiornaElencoSottodispositivi();
		} else {
			JOptionPane.showMessageDialog(this, "Eliminazione non possibile", "Errore", JOptionPane.ERROR_MESSAGE);
		}
    }//GEN-LAST:event_eliminaSottodispButtonActionPerformed



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aggiungiSottoAzButton;
    private javax.swing.JButton aggiungiSottodispButton;
    private javax.swing.JButton aggiungiUtilizzoButton;
    private javax.swing.JPanel azioneDettagliP;
    private javax.swing.JLabel azioneLabel;
    private javax.swing.JPanel azioneMacroP;
    private javax.swing.JPanel azioniBP;
    private javax.swing.JList azioniList;
    private javax.swing.JPanel azioniRightP;
    private javax.swing.JPanel dettagliAzioneSP;
    private javax.swing.JLabel diComplessoLabel;
    private javax.swing.JTabbedPane dispTabbed;
    private javax.swing.JLabel durataLabel;
    private javax.swing.JButton eliminaAzioneButton;
    private javax.swing.JButton eliminaSottoAzButton;
    private javax.swing.JButton eliminaSottodispButton;
    private javax.swing.JPanel eventiPanel;
    private javax.swing.JTable eventiTable;
    private javax.swing.JButton giuSottoAzButton;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JCheckBox macroCheck;
    private javax.swing.JButton modificaAzioneButton;
    private javax.swing.JButton modificaDurataButton;
    private javax.swing.JButton nuovaAzioneButton;
    private javax.swing.JButton rimuoviUtilizzoButton;
    private javax.swing.JPanel risorseUtilizzateBP;
    private javax.swing.JList sottoAzioniList;
    private javax.swing.JList sottodispList;
    private javax.swing.JButton suSottoAzButton;
    private javax.swing.JList utilizzoList;
    // End of variables declaration//GEN-END:variables

	/* END CHANGES 29.5 */	

	private void aggiornaElencoAzioni() {
		/* @MODELINTERACTION la vista richiama sull'oggetto DispositivoIntelligente
		 * il seguente metodo necessario alla visualizzazione:
		 * - getAzioni(): ArrayList<Azione> (restituisce le azioni)
		 * Gli oggetti Azione sono  poi visualizzati
		 * richiamando su di essi il metodo toString(), che quindi deve essere appropriatamente
		 * definito.
		 */

		ArrayList<Azione> azioni = this.myDispositivo.getAzioni();
		this.azioniListModel.removeAllElements();
		for (Azione di : azioni) {
			this.azioniListModel.addElement(di);
		}

		azioniList.clearSelection();
		this.eliminaAzioneButton.setEnabled(false);
		((CardLayout) this.azioniRightP.getLayout()).show(azioniRightP, "Blank");
	}

	private void aggiornaPannelloAzione(Azione azione) {
		/* @MODELINTERACTION la vista richiama sull'oggetto Azione
		 * i seguenti metodi necessari alla visualizzazione:
		 * - getNome(): String (il nome dell'azione)
		 * - isProgrammabile(): boolean (se e' programmabile)
		 * - getDurata(): int (durata dell'azione, se predefinita, -1 altrimenti
		 * - getUtilizzoRisorse(): ArrayList<Map.Entry<Risorsa,double>: 
		 *   l'elenco delle coppie (risorsa utilizzata, utilizzo)
		 * - isMacroazione(): boolean (se e' una macroazione)
		 * - getSottoAzioni(): ArrayList<Azione> (le sottoazioni, eventualmente vuoto)
		 * Gli oggetti Azione sono  poi visualizzati
		 * richiamando su di essi il metodo toString(), che quindi deve essere appropriatamente
		 * definito.
		 * La vista richiama inoltre sul dispositivo il metodo:
		 * - isDIComplesso(): boolean (se e' un dispositivo complesso)
		 */
		String descrAzione = azione.getNome() + ", " + (azione.isProgrammabile() ? "prog." : "non prog.");
		this.azioneLabel.setText(descrAzione);
		int durata = azione.getDurata();
		String durataStr = (durata < 0 ? "Durata non predef." : "Durata: " + durata + " sec.");
		this.durataLabel.setText(durataStr);

		aggiornaElencoUtilizzo(azione);

		boolean compl = this.myDispositivo.isDIComplesso();

		String dicompl = (compl ? "Il Dispositivo è complesso" : "Il Dispositivo è semplice");
		this.macroCheck.setEnabled(compl);
		this.sottoAzioniList.setEnabled(compl);

		boolean macro = azione.isMacroazione();

		this.macroCheck.setSelected(macro);
		this.aggiungiSottoAzButton.setEnabled(macro);
		this.sottoAzioniList.setEnabled(macro);

		aggiornaElencoSottoazioni(azione);
	}

	private void aggiornaElencoUtilizzo(Azione azione) {
		/* @MODELINTERACTION la vista richiama sull'oggetto Azione
		 * i seguenti metodi necessari alla visualizzazione:
		 * - getUtilizzoRisorse(): ArrayList<Map.Entry<Risorsa,double>: 
		 *   l'elenco delle coppie (risorsa utilizzata, utilizzo)
		 */

		this.utilizzoListModel.removeAllElements();

		HashMap<Risorsa, Double> util = azione.getUtilizzoRisorse();

		for (Map.Entry<Risorsa, Double> u : util.entrySet()) {
			this.utilizzoListModel.addElement(new Utilizzo(u));
		}
		this.utilizzoList.clearSelection();
		this.rimuoviUtilizzoButton.setEnabled(false);
	}

	private void aggiornaElencoSottoazioni(Azione azione) {
		this.sottoazioniListModel.removeAllElements();

		if (azione.isMacroazione()) {

			/* @OPERATIONrichiediElencoSottoazioni
			 */
			// @EXAMPLES T2/T3:
			// ArrayList<Azione> sottoaz = BackYardCtrl.richiediElencoSottoazioni(azione);
			ArrayList<Azione> sottoaz = this.myDispositivo.richiediElencoSottoazioni(azione);

			for (Azione az : sottoaz) {
				this.sottoazioniListModel.addElement(az);
			}
		}
		this.sottoAzioniList.clearSelection();
		this.eliminaSottoAzButton.setEnabled(false);
		this.suSottoAzButton.setEnabled(false);
		this.giuSottoAzButton.setEnabled(false);
	}

	private void modificaPosizioneSottoazione(int spost) {
		Azione azione = (Azione) this.azioniList.getSelectedValue();
		Azione sottoaz = (Azione) this.sottoAzioniList.getSelectedValue();

		int currentPos = this.sottoAzioniList.getSelectedIndex();
		int newPos = currentPos + spost;

		if (newPos < 0 || newPos >= this.sottoazioniListModel.getSize()) //spostamento gia' al massimo, non fa nulla
		{
			return;
		}

		/* @OPERATIONmodificaPosizione
		 */
		// @EXAMPLES T2/T3:
		// boolean modificata = BackYardCtrl.modificaPosizione(azione, sottoaz, newPos);
		boolean modificata = this.myDispositivo.modificaPosizione(azione, sottoaz, newPos);

		if (modificata) {
			this.aggiornaElencoSottoazioni(azione);
			this.sottoAzioniList.setSelectedValue(sottoaz, true);
		} else {
			JOptionPane.showMessageDialog(this, "Spostamento non possibile", "Errore", JOptionPane.ERROR_MESSAGE);

		}

	}
	
	/* BEGIN CHANGES 29.5 */	
	private void aggiornaElencoSottodispositivi() {
		this.sottodispListModel.removeAllElements();

		/* @OPERATIONrichiediSottodispositivi
		 */
		// @EXAMPLES T2/T3:
		// ArrayList<DispositivoIntelligente> sottodisp = BackYardCtrl.richiediSottodispositivi();			
		ArrayList<DispositivoIntelligente> sottodisp = this.myScenario.richiediSottoDispositivi(this.myDispositivo);

		for (DispositivoIntelligente sd : sottodisp) {
			this.sottodispListModel.addElement(sd);
		}

		this.sottodispList.clearSelection();
		this.eliminaSottodispButton.setEnabled(false);
	}

	void aggiornaTabellaEventi() {

		/* @OPERATIONrichiediEventiDisponibili
		 */
		// @EXAMPLES T2/T3:
		// ArrayList<Evento> BackYardCtrl.richiediEventiDisponibili();
		ArrayList<Evento> eventi = this.myDispositivo.richiediEventiDisponibili();

		/* @MODELINTERACTION la vista richiama sull'oggetto Evento
		 * i seguenti metodi necessari alla visualizzazione:
		 * - isAbilitato(): boolean (dice se e' abilitato)
		 * - toString(): String (rappresentazione testuale dell'evento)
		 */
		this.eventiTableModel = new EventiTableModel(eventi);
		this.eventiTable.setModel(eventiTableModel);
	}
	
	/* END CHANGES 29.5 */
}
