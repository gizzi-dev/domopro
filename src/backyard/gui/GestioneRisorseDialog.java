/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package backyard.gui;

import Model.Risorsa;
import Model.ScenarioSimulazione;
import Model.Collocazione;
import Model.Contesto;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author picardi
 */
public class GestioneRisorseDialog extends javax.swing.JDialog {

	private ScenarioSimulazione myScenario;
	private Contesto contesto;
	private String nomeContesto;
	private DefaultListModel<Risorsa> risorseListModel;
	java.awt.Frame owner;

	/**
	 * Creates new form GestioneRisorseDialog
	 */
	public GestioneRisorseDialog(java.awt.Frame parent) {
		super(parent, true);
		owner = parent;
		initComponents();
		risorseListModel = new DefaultListModel<>();
		this.risorseList.setModel(risorseListModel);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        risorsePanel = new javax.swing.JPanel();
        javax.swing.JSplitPane risorseSplit = new javax.swing.JSplitPane();
        elencoRisorseP = new javax.swing.JPanel();
        javax.swing.JScrollPane jScrollPane1 = new javax.swing.JScrollPane();
        risorseList = new javax.swing.JList();
        javax.swing.JPanel risorseSP = new javax.swing.JPanel();
        nuovaRisorsaButton = new javax.swing.JButton();
        eliminaRisorsaButton = new javax.swing.JButton();
        modificaRisorsaButton = new javax.swing.JButton();
        spostaRisorsaButton = new javax.swing.JButton();
        javax.swing.JPanel risorseNP = new javax.swing.JPanel();
        filtraCheck = new javax.swing.JCheckBox();
        risorsaP = new javax.swing.JPanel();
        blankPanel = new javax.swing.JPanel();
        editRisorsaP = new javax.swing.JPanel();
        nomeLabel = new javax.swing.JLabel();
        collocLabel = new javax.swing.JLabel();
        tipoLabel = new javax.swing.JLabel();
        limiteLabel = new javax.swing.JLabel();
        limiteTotLabel = new javax.swing.JLabel();
        risorseOkP = new javax.swing.JPanel();
        chiudiButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        risorsePanel.setLayout(new java.awt.BorderLayout());

        risorseSplit.setDividerLocation(450);

        elencoRisorseP.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1), javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEtchedBorder(), javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2))));
        elencoRisorseP.setLayout(new java.awt.BorderLayout());

        risorseList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        risorseList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                risorseListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(risorseList);

        elencoRisorseP.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        nuovaRisorsaButton.setText("Nuova...");
        nuovaRisorsaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuovaRisorsaButtonActionPerformed(evt);
            }
        });
        risorseSP.add(nuovaRisorsaButton);

        eliminaRisorsaButton.setText("Elimina");
        eliminaRisorsaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminaRisorsaButtonActionPerformed(evt);
            }
        });
        risorseSP.add(eliminaRisorsaButton);

        modificaRisorsaButton.setText("Modifica...");
        modificaRisorsaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificaRisorsaButtonActionPerformed(evt);
            }
        });
        risorseSP.add(modificaRisorsaButton);

        spostaRisorsaButton.setText("Sposta...");
        spostaRisorsaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spostaRisorsaButtonActionPerformed(evt);
            }
        });
        risorseSP.add(spostaRisorsaButton);

        elencoRisorseP.add(risorseSP, java.awt.BorderLayout.SOUTH);

        risorseNP.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        filtraCheck.setText("Filtra per contesto");
        filtraCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filtraCheckActionPerformed(evt);
            }
        });
        risorseNP.add(filtraCheck);

        elencoRisorseP.add(risorseNP, java.awt.BorderLayout.PAGE_START);

        risorseSplit.setLeftComponent(elencoRisorseP);

        risorsaP.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1), javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEtchedBorder(), javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2))));
        risorsaP.setLayout(new java.awt.CardLayout());

        javax.swing.GroupLayout blankPanelLayout = new javax.swing.GroupLayout(blankPanel);
        blankPanel.setLayout(blankPanelLayout);
        blankPanelLayout.setHorizontalGroup(
            blankPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 263, Short.MAX_VALUE)
        );
        blankPanelLayout.setVerticalGroup(
            blankPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 247, Short.MAX_VALUE)
        );

        risorsaP.add(blankPanel, "Blank");

        editRisorsaP.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        editRisorsaP.setLayout(new java.awt.GridLayout(5, 1));

        nomeLabel.setFont(nomeLabel.getFont().deriveFont(nomeLabel.getFont().getStyle() | java.awt.Font.BOLD, nomeLabel.getFont().getSize()+3));
        nomeLabel.setText("nome risorsa");
        editRisorsaP.add(nomeLabel);

        collocLabel.setText("collocazione risorsa");
        editRisorsaP.add(collocLabel);

        tipoLabel.setText("tipo risorsa");
        editRisorsaP.add(tipoLabel);

        limiteLabel.setText("limite risorsa");
        editRisorsaP.add(limiteLabel);

        limiteTotLabel.setText("limite totale risorsa");
        editRisorsaP.add(limiteTotLabel);

        risorsaP.add(editRisorsaP, "EditRisorsa");

        risorseSplit.setRightComponent(risorsaP);

        risorsePanel.add(risorseSplit, java.awt.BorderLayout.CENTER);

        getContentPane().add(risorsePanel, java.awt.BorderLayout.CENTER);

        chiudiButton.setText("Chiudi");
        chiudiButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chiudiButtonActionPerformed(evt);
            }
        });
        risorseOkP.add(chiudiButton);

        getContentPane().add(risorseOkP, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chiudiButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chiudiButtonActionPerformed
		setVisible(false);
    }//GEN-LAST:event_chiudiButtonActionPerformed

    private void risorseListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_risorseListValueChanged
		if (!evt.getValueIsAdjusting()) {
			this.updateButtons();
			/* @MODELINTERACTION la visualizzazione invoca i seguenti metodi sull'oggetto Risorsa
			 * per poterne mostrare le caratteristiche:
			 * - toString(): String (per l'elenco di risorse)
			 * - aConsumo(): boolean (per sapere se e' una risorsa a consumo)
			 * - getLimite(): int (per sapere il limite nell'unit√† di tempo)
			 * - getLimiteTotale(): int (per sapere il limite totale in caso di risorse a consumo)
			 * - getRinnovo(): int (per sapere ogni quanti giorni si rinnova la disponibilita', sempre in caso di risorse a consumo)
			 * - getCollocazione(): Collocazione (per sapere la collocazione della risorsa)
			 * Inoltre sull'oggetto Collocazione restituito da quest'ultimo metodo viene chiamato
			 * il metodo toString()
			 */
			Object o = this.risorseList.getSelectedValue();
			if (o == null) {
				// visualizza sulla destra un pannello vuoto
				((CardLayout) this.risorsaP.getLayout()).show(risorsaP, "Blank");
			} else {
				Risorsa ris = (Risorsa) o;
				// visuaizza le info della risorsa
				this.nomeLabel.setText(ris.getNome());
				this.collocLabel.setText(ris.getCollocazione().getNome());
				if (ris.aConsumo()) {
					this.tipoLabel.setText("Risorsa a consumo");
				} else {
					this.tipoLabel.setText("Risorsa fissa");
				}
				this.limiteLabel.setText("" + ris.getLimite());
				if (ris.aConsumo()) {
					this.limiteTotLabel.setText("" + ris.getLimiteTot() + " ogni " + ris.getGiorniRinnovo() + " gg.");
				} else {
					this.limiteTotLabel.setText("");
				}
				((CardLayout) this.risorsaP.getLayout()).show(risorsaP, "EditRisorsa");
			}
		}
    }//GEN-LAST:event_risorseListValueChanged

    private void filtraCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filtraCheckActionPerformed
		Object selected = this.risorseList.getSelectedValue();
		this.aggiornaElencoRisorse();
		if (selected != null) {
			this.risorseList.setSelectedValue(selected, true);
		}
    }//GEN-LAST:event_filtraCheckActionPerformed

    private void nuovaRisorsaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuovaRisorsaButtonActionPerformed
		// Chiede le informazioni necessarie a creare la risorsa
		DatiRisorsaDialog dia = new DatiRisorsaDialog(this.owner);
		dia.setVisible(true);

		if (dia.getValue() == JOptionPane.OK_OPTION) { // L'utente ha premuto Ok

			// Ottiene il nome inserito
			String nome = dia.getNome();

			// Ottiene il limite inserito
			int limite = dia.getLimite();

			// Ottiene il tipo della risorsa
			boolean aconsumo = dia.getAConsumo();

			// Se a consumo, ottiene il limite totale
			int limiteTot = 0;
			if (aconsumo) {
				limiteTot = dia.getLimiteTot();
			}

			// Se a consumo, ottiene il rinnovo
			int rinnovo = 0;
			if (aconsumo) {
				rinnovo = dia.getRinnovo();
			}

			if (nome.length() > 0) { // Il nome inserito e' non vuoto
				/* @OPERATIONcreaRisorsa
				 * ATTENZIONE: qui si immagina che ci siano due operazioni diverse per creare
				 * risorse fisse o a consumo.
				 * in base a come si √® gestito il caso di nome non valido, bisogna o catturare
				 * l'eccezione o verificare il valore restituito dall'operazione. In ogni
				 * caso si pu√≤ mostrare una message dialog analoga a quella che qui viene visualizzata quando l'utente
				 * non inserisce NESSUN NOME.
				 */

				Risorsa ris = null;
				if (aconsumo) {
		         	// @EXAMPLES T2/T3:
                    // ris = BackYardCtrl.creaRisorsa(nome, limite, limiteTot, rinnovo, contesto);
				ris = myScenario.creaRisorsa(nome, limite, limiteTot, rinnovo, contesto);
				} else {
	             	// @EXAMPLES T2/T3:
                    // ris = BackYardCtrl.creaRisorsa(nome, limite, contesto);
                                 ris = myScenario.creaRisorsa(nome, limite, contesto);
				}

				if (ris != null) // Alternativamente: se NON viene lanciata alcuna eccezione
				{
					this.aggiornaElencoRisorse();
					this.risorseList.setSelectedValue(ris, true);
				} else { // ALternativamente: se viene lanciata una eccezine
					JOptionPane.showMessageDialog(this, "Risorsa non valida", "Errore", JOptionPane.ERROR_MESSAGE);
				}

			} else { // Il nome inserito e' vuoto
				JOptionPane.showMessageDialog(this, "Nome risorsa non valido", "Errore", JOptionPane.ERROR_MESSAGE);
			}
		}
    }//GEN-LAST:event_nuovaRisorsaButtonActionPerformed

    private void eliminaRisorsaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminaRisorsaButtonActionPerformed
		// Ottiene risorsa selezionata nell'elenco
		Risorsa ris = (Risorsa) risorseList.getSelectedValue();

		/* @OPERATIONeliminaRisorsa
		 * in base a come si √® gestito il caso di stanza che non si pu√≤ eliminare, bisogna o catturare
		 * l'eccezione o verificare il valore restituito dall'operazione. Qui in caso di valore restituito
		 * pari a false (piano non eliminabile) viene visualizzato un messaggio di errore.		
		 */
		// @EXAMPLES T2/T3:
        // boolean eliminato = BackYardCtrl.eliminaRisorsa(ris);
		boolean eliminato = true; //myScenario.eliminaRisorsa(ris);

		// Aggiornamento view
		if (eliminato) {
			this.aggiornaElencoRisorse();
		} else {
			// Caso in cui il piano non √® elimiminabile
			JOptionPane.showMessageDialog(this, "Non si pu√≤ eliminare questa risorsa", "Errore", JOptionPane.ERROR_MESSAGE);
		}
    }//GEN-LAST:event_eliminaRisorsaButtonActionPerformed

    private void modificaRisorsaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificaRisorsaButtonActionPerformed
		// Ottiene la Risorsa selezionata, di cui vanno modificati i dati
		Risorsa ris = (Risorsa) this.risorseList.getSelectedValue();

		// Chiede i dati (e' possibile che l'utente prema cancel rinunciando all'operazione)
		/* @MODELINTERACTION per inizializzare i dati della dialog di richiesta,
		 * la vista richiama sull'oggetto Risorsa i seguenti metodi 
		 * - getNome(): String
		 * - aConsumo(): boolean (per sapere se e' una risorsa a consumo)
		 * - getLimite(): int (per sapere il limite nell'unit√† di tempo)
		 * - getLimiteTotale(): int (per sapere il limite totale in caso di risorse a consumo)
		 * - getRinnovo(): int (per sapere ogni quanti giorni si rinnova la disponibilita', sempre in caso di risorse a consumo)
		 * - getCollocazione(): Collocazione (per sapere la collocazione della risorsa)
		 * Inoltre sull'oggetto Collocazione restituito da quest'ultimo metodo viene chiamato
		 * il metodo toString()
		 */
		String nome = ris.getNome();
		Collocazione colloc = ris.getCollocazione();
		boolean aConsumo = ris.aConsumo();
		int limite = ris.getLimite();
		int limiteTot = 0;
		if (aConsumo) {
			limiteTot = ris.getLimiteTot();
		}
		int rinnovo = 0;
		if (aConsumo) {
			rinnovo = ris.getGiorniRinnovo();
		}

		DatiRisorsaDialog dia = new DatiRisorsaDialog(this.owner);
		dia.setNome(nome);
		dia.setLimite(limite);
		dia.setAConsumo(aConsumo);
		if (aConsumo) {
			dia.setLimiteTot(limiteTot);
			dia.setRinnovo(rinnovo);
		}
		dia.setVisible(true);

		if (dia.getValue() == JOptionPane.OK_OPTION) { // L'utente ha premuto Ok

			// Ottiene il nome inserito
			nome = dia.getNome();

			// Ottiene il limite inserito
			limite = dia.getLimite();

			// Ottiene il tipo della risorsa
			aConsumo = dia.getAConsumo();

			// Se a consumo, ottiene il limite totale
			limiteTot = 0;
			if (aConsumo) {
				limiteTot = dia.getLimiteTot();
			}

			// Se a consumo, ottiene il rinnovo
			rinnovo = 0;
			if (aConsumo) {
				rinnovo = dia.getRinnovo();
			}

			if (nome.length() > 0) { // Il nome inserito e' non vuoto
				/* @OPERATIONmodificaRisorsa
				 * ATTENZIONE: qui si immagina che ci siano due operazioni diverse per modificare
				 * risorse fisse o a consumo.
				 * in base a come si √® gestito il caso di nome non valido, bisogna o catturare
				 * l'eccezione o verificare il valore restituito dall'operazione. In ogni
				 * caso si pu√≤ mostrare una message dialog analoga a quella che qui viene visualizzata quando l'utente
				 * non inserisce NESSUN NOME.
				 */

				boolean modificata = false;
				if (aConsumo) {
	                // @EXAMPLES T2/T3:
                    // modificata = BackYardCtrl.modificaRisorsa(ris, nome, limite, limiteTot, rinnovo);
                                    modificata = myScenario.modificaRisorsa(ris, nome, limite, limiteTot, rinnovo);
				} else {
		            // @EXAMPLES T2/T3:
                    // modificata = BackYardCtrl.modificaRisorsa(ris, nome, limite);
                                    modificata = myScenario.modificaRisorsa(ris, nome, limite);
				}

				if (modificata) // Alternativamente: se NON viene lanciata alcuna eccezione
				{
					this.aggiornaElencoRisorse();
					this.risorseList.setSelectedValue(ris, true);
				} else { // ALternativamente: se viene lanciata una eccezine
					JOptionPane.showMessageDialog(this, "Nome della risorsa non disponibile", "Errore", JOptionPane.ERROR_MESSAGE);
				}

			} else { // Il nome inserito e' vuoto
				JOptionPane.showMessageDialog(this, "Nome risorsa non valido", "Errore", JOptionPane.ERROR_MESSAGE);
			}

		}
    }//GEN-LAST:event_modificaRisorsaButtonActionPerformed

    private void spostaRisorsaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spostaRisorsaButtonActionPerformed
		/* @OPERATIONrichiediCollocazioniPerRisorsa
		 */

		//@EXAMPLES T2/T3:
		// ArrayList<Collocazione> colloc = BackYardCtrl.richiediCollocazioniPerRisorsa();
		ArrayList<Collocazione> colloc = myScenario.richiediCollocazionePerRisorsa();

		// Visualizza la finestra per scegliere una collocazione
		SceltaCollocazioneDialog dia = new SceltaCollocazioneDialog(this.owner);
		DefaultListModel<Collocazione> lm = new DefaultListModel<>();
		for (Collocazione c : colloc) {
			lm.addElement(c);
		}
		dia.setCollocazioni(lm);
		dia.setVisible(true);

		if (dia.getValue() == JOptionPane.OK_OPTION) { // L'utente ha premuto Ok

			// Ottiene la collocazione scelta
			Collocazione c = (Collocazione) dia.getSelectedObject();

			// Ottiene la risorsa selezionata
			Risorsa ris = (Risorsa) this.risorseList.getSelectedValue();

			/* @OPERATIONassegnaCollocazione
			 * in base a come si √® gestito il caso di spostamento non possibile, bisogna o catturare
			 * l'eccezione o verificare il valore restituito dall'operazione
			 */
            //@EXAMPLES T2/T3:
            // boolean spostato = BackYardCtrl.assegnaCollocazione(ris, c);
			boolean spostato = myScenario.assegnaCollocazione(ris, c);

			if (spostato) // Alternativamente: se NON viene lanciata alcuna eccezione
			{
				//La visualizzazione delle risorse si aggiorna
				this.aggiornaElencoRisorse();
				risorseList.setSelectedValue(ris, true);

			} else { // ALternativamente: se viene lanciata una eccezione
				JOptionPane.showMessageDialog(this, "Spostamento non possibile", "Errore", JOptionPane.ERROR_MESSAGE);
			}

		}

    }//GEN-LAST:event_spostaRisorsaButtonActionPerformed

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(GestioneRisorseDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(GestioneRisorseDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(GestioneRisorseDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(GestioneRisorseDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

		/* Create and display the dialog */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				GestioneRisorseDialog dialog = new GestioneRisorseDialog(new javax.swing.JFrame());
				dialog.addWindowListener(new java.awt.event.WindowAdapter() {
					@Override
					public void windowClosing(java.awt.event.WindowEvent e) {
						System.exit(0);
					}
				});
				dialog.setVisible(true);
			}
		});
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel blankPanel;
    private javax.swing.JButton chiudiButton;
    private javax.swing.JLabel collocLabel;
    private javax.swing.JPanel editRisorsaP;
    private javax.swing.JPanel elencoRisorseP;
    private javax.swing.JButton eliminaRisorsaButton;
    private javax.swing.JCheckBox filtraCheck;
    private javax.swing.JLabel limiteLabel;
    private javax.swing.JLabel limiteTotLabel;
    private javax.swing.JButton modificaRisorsaButton;
    private javax.swing.JLabel nomeLabel;
    private javax.swing.JButton nuovaRisorsaButton;
    private javax.swing.JPanel risorsaP;
    private javax.swing.JList risorseList;
    private javax.swing.JPanel risorseOkP;
    private javax.swing.JPanel risorsePanel;
    private javax.swing.JButton spostaRisorsaButton;
    private javax.swing.JLabel tipoLabel;
    // End of variables declaration//GEN-END:variables

	void setup(ScenarioSimulazione scen, Contesto cont, String nomeCont) {
		myScenario = scen;
		contesto = cont;
		nomeContesto = nomeCont;
		aggiornaElencoRisorse();
	}

	private void aggiornaElencoRisorse() {
		// Stabilisce se l'elenco va filtrato
		boolean filtrare = this.filtraCheck.isSelected();

		/* @OPERATIONrichiediRisorseEsistenti
		 * Attenzione: nella GUI il contesto viene mantenuto tramite due variabili
		 * di istanza
		 * 1) "contesto" (di tipo Contesto), che √® uguale o all'Alloggio dello Scenario, o a uno
		 * dei Dispositivi, o a null se l'utente sta visualizzando i dispositivi ma 
		 * non ce n'√® ancora nessuno.
		 * 2) "nomeContesto" (di tipo String), che √® "alloggio" o "dispositivo" a seconda del tab
		 * selezionato.
		 * L'esempio qui di seguito usa la (1) ma, in base all'implementazione fatta di 
		 * richiediRisorseEsistenti, si pu√≤ scegliere di usare la (2)
		 */
		// @EXAMPLE T2/T3:
        // ArrayList<Risorsa> risorse = BAckYardCtrl.richiediRisorseEsistenti(nomeContesto, filtrare);
		ArrayList<Risorsa> risorse = myScenario.richiediRisorseEsistenti(contesto, filtrare);

		/* Aggiornamento della lista di risorse
		 */
		this.risorseListModel.removeAllElements();
		for (Risorsa r : risorse) {
			this.risorseListModel.addElement(r);
		}
		this.risorseList.setSelectedIndex(-1);
		updateButtons();

	}

	private void updateButtons() {
		boolean sel = (risorseList.getSelectedIndex() >= 0);
		this.eliminaRisorsaButton.setEnabled(sel);
		this.modificaRisorsaButton.setEnabled(sel);
		this.spostaRisorsaButton.setEnabled(sel);
	}
}
