/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package domosym.gui;

import model.domosym.*;
import backyard.gui.*;
import model.backyard.Alloggio;
import model.backyard.ScenarioSimulazione;
import model.backyard.UserInfo;
import model.backyard.InfoScenario;
import model.backyard.Importabile;
import model.backyard.Stanza;
import model.backyard.DispositivoIntelligente;
import model.backyard.BackYardApplicationController;
import model.backyard.Contesto;
import model.backyard.Piano;
import java.awt.CardLayout;
import java.sql.SQLException;
import java.sql.Time;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map.Entry;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JTabbedPane;
import model.backyard.Azione;
import model.backyard.Evento;

/**
 *
 * @author picardi
 */
public class SimPanel extends javax.swing.JPanel {

	private Simulazione mySim; //memorizza il GRASP controller delle operazioni che gestirà
	private DomoSym owner;
	private Alloggio planimetria;
	private DefaultListModel<Programma> progListModel;
        private DefaultListModel<DispositivoIntelligente> dispListModel;
	private DefaultListModel<ComandoProgramma> comListModel;
        private DefaultListModel<String> eventoListModel;
	private String nomeContesto;

	/**
	 * Creates new form ScenarioPanel
	 */
	public SimPanel(DomoSym by) {
		owner = by;
		initComponents();
		progListModel = new DefaultListModel<>();
		this.programmiList.setModel(progListModel);
		comListModel = new DefaultListModel<>();
		this.comandiList.setModel(comListModel);
                dispListModel = new DefaultListModel<>();
                this.dispIscrittiList.setModel(dispListModel);
                eventoListModel = new DefaultListModel<>();
                eventiIscrizioneList.setModel(eventoListModel);
		
	}

	/* Inizializza questo pannello con un dato Scenario di Simulazione
	 *
	 */
	public void setup(Simulazione sim) {
		this.titleLabel.setText("Simulazione di: " + sim.getScenario().getNome());
		mySim = sim;

		ArrayList<Programma> prog = mySim.ottieniElencoProgrammi();	
		simulazioneTabbed.setSelectedIndex(0);                
		aggiornaElencoProgrammi(prog);
                
                ArrayList<DispositivoIntelligente> dispositivi = mySim.ottieniElencoDispositivi();
		aggiornaElencoDispositivi(dispositivi);
                

		// All'inizio nessun piano è selezionato
		((CardLayout) this.programmaP.getLayout()).show(programmaP, "Blank");                
		this.eliminaProgrammaButton.setEnabled(false);
                this.salvaProgrammaButton.setEnabled(false);
                //All'inizio nessun dispositivo è seleazionato
                this.dispositivoP.setVisible(false);
                
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 * @return 
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        simulazioneTabbed = new javax.swing.JTabbedPane();
        programmaPanel = new javax.swing.JPanel();
        javax.swing.JSplitPane planimetriaSplit = new javax.swing.JSplitPane();
        elencoProgrammi = new javax.swing.JPanel();
        javax.swing.JScrollPane jScrollPane1 = new javax.swing.JScrollPane();
        programmiList = new javax.swing.JList();
        javax.swing.JPanel programmiSP = new javax.swing.JPanel();
        nuovoProgrammaButton = new javax.swing.JButton();
        eliminaProgrammaButton = new javax.swing.JButton();
        salvaProgrammaButton = new javax.swing.JButton();
        programmaP = new javax.swing.JPanel();
        blankPanel = new javax.swing.JPanel();
        editProgrammaP = new javax.swing.JPanel();
        javax.swing.JPanel datiProgramma = new javax.swing.JPanel();
        datiLabel = new javax.swing.JLabel();
        javax.swing.JPanel datiProgrammaEP = new javax.swing.JPanel();
        attivaButton = new javax.swing.JButton();
        modificaDatiButton = new javax.swing.JButton();
        javax.swing.JPanel elencoComandi = new javax.swing.JPanel();
        javax.swing.JScrollPane jScrollPane2 = new javax.swing.JScrollPane();
        comandiList = new javax.swing.JList();
        javax.swing.JPanel comandiSP = new javax.swing.JPanel();
        nuovaStanzaButton = new javax.swing.JButton();
        eliminaStanzaButton = new javax.swing.JButton();
        modificaComandoButton = new javax.swing.JButton();
        salvaComandoButton = new javax.swing.JButton();
        iscrizioniPanel = new javax.swing.JPanel();
        elencoDispositivi = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        dispIscrittiList = new javax.swing.JList();
        dispositivoP = new javax.swing.JPanel();
        IscrizioneP = new javax.swing.JPanel();
        nomeDispLabel = new javax.swing.JLabel();
        collocDispLabel = new javax.swing.JLabel();
        nonIscrittoLabel = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        eventiIscrizioneList = new javax.swing.JList();
        jPanel4 = new javax.swing.JPanel();
        setAllarmeButton = new javax.swing.JButton();
        setAvvisoButton = new javax.swing.JButton();
        iscrivitiButton = new javax.swing.JButton();
        javax.swing.JPanel simulazioneTitle = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        javax.swing.JPanel scenarioTitleEP = new javax.swing.JPanel();
        chiudiButton = new javax.swing.JButton();
        salvaButton = new javax.swing.JButton();
        scenarioSP = new javax.swing.JPanel();
        attivaSimulazioneButton = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        simulazioneTabbed.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                simulazioneTabbedStateChanged(evt);
            }
        });

        programmaPanel.setLayout(new java.awt.BorderLayout());

        planimetriaSplit.setDividerLocation(250);

        elencoProgrammi.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1), javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEtchedBorder(), javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2))));
        elencoProgrammi.setLayout(new java.awt.BorderLayout());

        programmiList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        programmiList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                programmiListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(programmiList);

        elencoProgrammi.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        nuovoProgrammaButton.setLabel("Nuovo...");
        nuovoProgrammaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuovoProgrammaButtonActionPerformed(evt);
            }
        });
        programmiSP.add(nuovoProgrammaButton);

        eliminaProgrammaButton.setText("Elimina");
        eliminaProgrammaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminaProgrammaButtonActionPerformed(evt);
            }
        });
        programmiSP.add(eliminaProgrammaButton);

        salvaProgrammaButton.setText("Salva");
        salvaProgrammaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salvaProgrammaButtonActionPerformed(evt);
            }
        });
        programmiSP.add(salvaProgrammaButton);

        elencoProgrammi.add(programmiSP, java.awt.BorderLayout.SOUTH);

        planimetriaSplit.setLeftComponent(elencoProgrammi);

        programmaP.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1), javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEtchedBorder(), javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2))));
        programmaP.setLayout(new java.awt.CardLayout());

        javax.swing.GroupLayout blankPanelLayout = new javax.swing.GroupLayout(blankPanel);
        blankPanel.setLayout(blankPanelLayout);
        blankPanelLayout.setHorizontalGroup(
            blankPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 544, Short.MAX_VALUE)
        );
        blankPanelLayout.setVerticalGroup(
            blankPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 473, Short.MAX_VALUE)
        );

        programmaP.add(blankPanel, "Blank");

        editProgrammaP.setLayout(new java.awt.BorderLayout());

        datiProgramma.setBorder(javax.swing.BorderFactory.createEmptyBorder(3, 3, 3, 3));
        datiProgramma.setLayout(new java.awt.BorderLayout());

        datiLabel.setText("Scenario corrente: NOME");
        datiProgramma.add(datiLabel, java.awt.BorderLayout.WEST);

        attivaButton.setText("Attiva");
        attivaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attivaButtonActionPerformed(evt);
            }
        });
        datiProgrammaEP.add(attivaButton);

        modificaDatiButton.setLabel("Modifica...");
        modificaDatiButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificaDatiButtonActionPerformed(evt);
            }
        });
        datiProgrammaEP.add(modificaDatiButton);

        datiProgramma.add(datiProgrammaEP, java.awt.BorderLayout.EAST);

        editProgrammaP.add(datiProgramma, java.awt.BorderLayout.NORTH);

        elencoComandi.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1), javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEtchedBorder(), javax.swing.BorderFactory.createEmptyBorder(4, 4, 4, 4))));
        elencoComandi.setLayout(new java.awt.BorderLayout());

        comandiList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        comandiList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                comandiListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(comandiList);

        elencoComandi.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        nuovaStanzaButton.setText("Crea Comando");
        nuovaStanzaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuovaStanzaButtonActionPerformed(evt);
            }
        });
        comandiSP.add(nuovaStanzaButton);

        eliminaStanzaButton.setText("Elimina");
        eliminaStanzaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminaStanzaButtonActionPerformed(evt);
            }
        });
        comandiSP.add(eliminaStanzaButton);

        modificaComandoButton.setText("Modifica...");
        modificaComandoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificaComandoButtonActionPerformed(evt);
            }
        });
        comandiSP.add(modificaComandoButton);

        salvaComandoButton.setText("Salva Comando");
        salvaComandoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salvaComandoButtonActionPerformed(evt);
            }
        });
        comandiSP.add(salvaComandoButton);

        elencoComandi.add(comandiSP, java.awt.BorderLayout.SOUTH);

        editProgrammaP.add(elencoComandi, java.awt.BorderLayout.CENTER);

        programmaP.add(editProgrammaP, "EditPiano");

        planimetriaSplit.setRightComponent(programmaP);

        programmaPanel.add(planimetriaSplit, java.awt.BorderLayout.CENTER);

        simulazioneTabbed.addTab("Programmi", programmaPanel);

        dispIscrittiList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        dispIscrittiList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                dispIscrittiListValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(dispIscrittiList);

        javax.swing.GroupLayout elencoDispositiviLayout = new javax.swing.GroupLayout(elencoDispositivi);
        elencoDispositivi.setLayout(elencoDispositiviLayout);
        elencoDispositiviLayout.setHorizontalGroup(
            elencoDispositiviLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(elencoDispositiviLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE)
                .addContainerGap())
        );
        elencoDispositiviLayout.setVerticalGroup(
            elencoDispositiviLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(elencoDispositiviLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        IscrizioneP.setBackground(new java.awt.Color(255, 255, 102));

        nomeDispLabel.setText("Nome:");

        collocDispLabel.setText("Collocazione:");

        nonIscrittoLabel.setText("<html><b style=\"color:'#993300'\">Non sei ancora iscritto a questo dispositivo</b></html>");

        eventiIscrizioneList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane4.setViewportView(eventiIscrizioneList);

        javax.swing.GroupLayout IscrizionePLayout = new javax.swing.GroupLayout(IscrizioneP);
        IscrizioneP.setLayout(IscrizionePLayout);
        IscrizionePLayout.setHorizontalGroup(
            IscrizionePLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(IscrizionePLayout.createSequentialGroup()
                .addGroup(IscrizionePLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(IscrizionePLayout.createSequentialGroup()
                        .addGroup(IscrizionePLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(IscrizionePLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(IscrizionePLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(collocDispLabel)
                                    .addComponent(nomeDispLabel)))
                            .addGroup(IscrizionePLayout.createSequentialGroup()
                                .addGap(75, 75, 75)
                                .addComponent(nonIscrittoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 225, Short.MAX_VALUE))
                    .addGroup(IscrizionePLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane4)))
                .addContainerGap())
        );
        IscrizionePLayout.setVerticalGroup(
            IscrizionePLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, IscrizionePLayout.createSequentialGroup()
                .addComponent(nonIscrittoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(nomeDispLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(collocDispLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 309, Short.MAX_VALUE)
                .addContainerGap())
        );

        setAllarmeButton.setText("Imposta Allarme");
        setAllarmeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setAllarmeButtonActionPerformed(evt);
            }
        });

        setAvvisoButton.setText("Imposta Avviso");
        setAvvisoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setAvvisoButtonActionPerformed(evt);
            }
        });

        iscrivitiButton.setText("Iscriviti!");
        iscrivitiButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iscrivitiButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addComponent(iscrivitiButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(setAvvisoButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(setAllarmeButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(iscrivitiButton)
                    .addComponent(setAvvisoButton)
                    .addComponent(setAllarmeButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout dispositivoPLayout = new javax.swing.GroupLayout(dispositivoP);
        dispositivoP.setLayout(dispositivoPLayout);
        dispositivoPLayout.setHorizontalGroup(
            dispositivoPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(IscrizioneP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(dispositivoPLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        dispositivoPLayout.setVerticalGroup(
            dispositivoPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dispositivoPLayout.createSequentialGroup()
                .addComponent(IscrizioneP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout iscrizioniPanelLayout = new javax.swing.GroupLayout(iscrizioniPanel);
        iscrizioniPanel.setLayout(iscrizioniPanelLayout);
        iscrizioniPanelLayout.setHorizontalGroup(
            iscrizioniPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(iscrizioniPanelLayout.createSequentialGroup()
                .addComponent(elencoDispositivi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(dispositivoP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        iscrizioniPanelLayout.setVerticalGroup(
            iscrizioniPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(elencoDispositivi, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(iscrizioniPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(dispositivoP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        simulazioneTabbed.addTab("Iscrizioni", iscrizioniPanel);

        add(simulazioneTabbed, java.awt.BorderLayout.CENTER);

        simulazioneTitle.setBorder(javax.swing.BorderFactory.createEmptyBorder(3, 3, 3, 3));
        simulazioneTitle.setLayout(new java.awt.BorderLayout());

        titleLabel.setText("Simulazion di: NOME");
        simulazioneTitle.add(titleLabel, java.awt.BorderLayout.WEST);

        chiudiButton.setText("Chiudi");
        chiudiButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chiudiButtonActionPerformed(evt);
            }
        });
        scenarioTitleEP.add(chiudiButton);

        salvaButton.setText("Salva Simulazione");
        salvaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salvaButtonActionPerformed(evt);
            }
        });
        scenarioTitleEP.add(salvaButton);

        simulazioneTitle.add(scenarioTitleEP, java.awt.BorderLayout.EAST);

        add(simulazioneTitle, java.awt.BorderLayout.NORTH);

        attivaSimulazioneButton.setText("Attiva Simulazione");
        attivaSimulazioneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attivaSimulazioneButtonActionPerformed(evt);
            }
        });
        scenarioSP.add(attivaSimulazioneButton);

        add(scenarioSP, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents

    private void chiudiButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chiudiButtonActionPerformed
		/* @MODELINTERACTION per verificare se può chiudere tranquillamente,
		 * la vista chiama sull'oggetto ScenarioSimulazione il seguente metodo:
		 * - isSalvato(): boolean
		 * che restituisce il valore della variabile di istanza 'salvato'
		 */
		int option = JOptionPane.YES_OPTION;
                boolean salvato = true;
                for(Programma p: mySim.ottieniElencoProgrammi()){
                    if(!p.isSalvato()) salvato =false;
                    for(ComandoProgramma com : p.getComandi()){
                        if(!com.isSalvato()) salvato = false;
                    }
                }
		if (!mySim.getSalvato() || !salvato) {
			option = JOptionPane.showConfirmDialog(this.owner, "Sicuro di voler chiudere? \nCi sono informazioni non salvate.",
				"Attenzione", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
		}
		if (option == JOptionPane.YES_OPTION) // se era gia' salvato o se l'utente ha detto si'
		{
			owner.chiudiSimulazione(evt);
		}
    }//GEN-LAST:event_chiudiButtonActionPerformed

    private void modificaDatiButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificaDatiButtonActionPerformed
		// Ottiene il Piano selezionato, di cui vanno modificati i dati
		Programma p = (Programma) this.programmiList.getSelectedValue();

		// Chiede il  nome e il livello (e' possibile che l'utente prema cancel rinunciando all'operazione)
		/* @MODELINTERACTION per inizializzare i dati della dialog di richiesta,
		 * la vista richiama sull'oggetto Piano i seguenti metodi 
		 * - getNome(): String
		 * - getLivello(): int
		 */
		String nome = p.getNome();
		DatiProgrammaDialog dia = new DatiProgrammaDialog(this.owner);
		dia.setNome(nome);	
                dia.setTipo(!p.isGenerico());
                dia.setRatioOff();
		dia.setVisible(true);

		if (dia.getValue() == JOptionPane.OK_OPTION) { // L'utente ha premuto Ok

			// Ottiene il nome inserito
			nome = dia.getNome();
			if (nome.length() > 0) { // Il nome inserito e' non vuoto
				/* @OPERATIONmodificaPiano
				 * in base a come si è gestito il caso di nome o livello non valido, bisogna o catturare
				 * l'eccezione o verificare il valore restituito dall'operazione. In ogni
				 * caso si può mostrare una message dialog analoga a quella che qui viene visualizzata quando l'utente
				 * non inserisce NESSUN NOME.
				 */

				// @EXAMPLES T2/T3:
				// Piano p = BackYardCtrl.modificaPiano(piano, nome, livello);
				boolean modified= mySim.modificaNomeProgramma(p, nome);
                                
                                

				if (modified) // Alternative: se NON viene lanciata alcuna eccezione, o se il piano restituito è NON null
				{
					/* @MODELINTERACTION la vista richiama sull'oggetto ScenarioSimulazione
					 * il seguente metodo necessario al proprio aggiornamento 
					 * - getPiani(): ArrayList<Piano>
					 */
					ArrayList<Programma> prog = this.mySim.ottieniElencoProgrammi();
					this.aggiornaElencoProgrammi(prog);

					// Seleziona il piano appema modificato
					this.programmiList.setSelectedValue(prog, true);
				} else { // Alternative: se viene lanciata una eccezione o se il piano restituito è null
					JOptionPane.showMessageDialog(this, "Nome del programma non disponibile", "Errore", JOptionPane.ERROR_MESSAGE);
				}

			} else { // Il nome inserito e' vuoto
				JOptionPane.showMessageDialog(this, "Nome programma non valido", "Errore", JOptionPane.ERROR_MESSAGE);
			}
		}
    }//GEN-LAST:event_modificaDatiButtonActionPerformed

    private void programmiListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_programmiListValueChanged
		if (!evt.getValueIsAdjusting()) {			
			int sel = programmiList.getSelectedIndex();
			this.eliminaProgrammaButton.setEnabled(sel >= 0);
                        this.salvaProgrammaButton.setEnabled(sel >= 0);
			if (sel < 0) {
				((CardLayout) this.programmaP.getLayout()).show(programmaP, "Blank");
			} else { 				
				Programma p = (Programma) programmiList.getSelectedValue();
                                if(this.mySim.getSimula()!= null && this.mySim.getSimula().getNome().equals(p.getNome())){
                                    this.attivaButton.setText("Disattiva");  
                                }
                                else if(!p.isGenerico() ){
                                    this.attivaButton.setEnabled(true);
                                    this.attivaButton.setText("Attiva");   
                                }
                                else{
                                    this.attivaButton.setEnabled(false);
                                    this.attivaButton.setText("Attiva");
                                }                                
				ArrayList<ComandoProgramma> comandi = p.getComandi();
                                
				String nome = p.getNome();
				// Imposta il lato destro della finestra in modo che visualizzi le informazioni del piano selezionato
				this.datiLabel.setText("Nome Programma: "+nome);
				aggiornaElencoComandi(comandi);

				// All'inizio nessuna stanza e' selezionata, quindi i pulsanti relativi sono disabilitati
				this.eliminaStanzaButton.setEnabled(false);
				this.modificaComandoButton.setEnabled(false);
                                this.salvaComandoButton.setEnabled(false);
				// Mostra il pannello con le informazioni del piano selezionato
				((CardLayout) this.programmaP.getLayout()).show(programmaP, "EditPiano");
			}

		}
    }//GEN-LAST:event_programmiListValueChanged

    private void eliminaProgrammaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminaProgrammaButtonActionPerformed
		// Ottiene oggetto selezionato nell'elenco
		Programma p = (Programma) programmiList.getSelectedValue();

		boolean eliminato = this.mySim.eliminaProgramma(p.getNome());                
		// Aggiornamento view
		if (eliminato) {
			/* @MODELINTERACTION la vista richiama sull'oggetto ScenarioSimulazione
			 * il seguente metodo necessario al proprio aggiornamento 
			 * - getPiani(): ArrayList<Piano>
			 */
			ArrayList<Programma> progs = mySim.ottieniElencoProgrammi();
			this.aggiornaElencoProgrammi(progs);
		} else {
			// Caso in cui il piano non è elimiminabile
			JOptionPane.showMessageDialog(this, "Non si può eliminare questo programma", "Errore", JOptionPane.ERROR_MESSAGE);
		}
    }//GEN-LAST:event_eliminaProgrammaButtonActionPerformed

    private void nuovoProgrammaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuovoProgrammaButtonActionPerformed
		// Chiede il  nome e il livello (e' possibile che l'utente prema cancel rinunciando all'operazione)
		DatiProgrammaDialog dia = new DatiProgrammaDialog(this.owner);
		dia.setVisible(true);

		if (dia.getValue() == JOptionPane.OK_OPTION) { // L'utente ha premuto Ok

			// Ottiene il nome inserito
			String nome = dia.getNome();

			// Ottiene il livello inserito
			boolean tipo = dia.getTipo();

			if (nome.length() > 0) { // Il nome inserito e' non vuoto
				/* @OPERATIONaggiungiPiano
				 * in base a come si è gestito il caso di nome o livello non valido, bisogna o catturare
				 * l'eccezione o verificare il valore restituito dall'operazione. In ogni
				 * caso si può mostrare una message dialog analoga a quella che qui viene visualizzata quando l'utente
				 * non inserisce NESSUN NOME.
				 */

				// @EXAMPLES T2/T3:
				// Piano p = BackYardCtrl.aggiungiPiano(nome, livello);
				Programma p= this.mySim.creaNuovoProgramma(nome, tipo);
                               

				if (p != null) // Alternativamente: se NON viene lanciata alcuna eccezione
				{
					/* @MODELINTERACTION la vista richiama sull'oggetto ScenarioSimulazione
					 * il seguente metodo necessario al proprio aggiornamento 
					 * - getPiani(): ArrayList<Piano>
					 */
					ArrayList<Programma> prog = mySim.ottieniElencoProgrammi();
					this.aggiornaElencoProgrammi(prog);
				} else { // ALternativamente: se viene lanciata una eccezine
					JOptionPane.showMessageDialog(this, "Nome del programma non disponibile", "Errore", JOptionPane.ERROR_MESSAGE);
				}

			} else { // Il nome inserito e' vuoto
				JOptionPane.showMessageDialog(this, "Nome programma non valido", "Errore", JOptionPane.ERROR_MESSAGE);
			}
		}
    }//GEN-LAST:event_nuovoProgrammaButtonActionPerformed

    private void comandiListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_comandiListValueChanged
		if (!evt.getValueIsAdjusting()) {
			int sel = comandiList.getSelectedIndex();
			this.eliminaStanzaButton.setEnabled(sel >= 0);
			this.modificaComandoButton.setEnabled(sel >= 0);
                        this.salvaComandoButton.setEnabled(sel >= 0);
		}
    }//GEN-LAST:event_comandiListValueChanged

    private void salvaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salvaButtonActionPerformed
		/* @MODELINTERACTION per verificare se c'e' qualcosa da salvare,
		 * la vista chiama sull'oggetto ScenarioSimulazione il seguente metodo:
		 * - isSalvato(): boolean
		 * che restituisce il valore della variabile di istanza 'salvato'
		 */
		if (mySim.getSalvato()) {
			JOptionPane.showMessageDialog(this.owner, "Nulla di nuovo da salvare.",
				"Informazione", JOptionPane.INFORMATION_MESSAGE);
		} else {
			/* @OPERATIONsalvaScenario
			 */
			// @EXAMPLES T2/T3:
			// BackYardCtrl.salvaScenario();
			DomoSymApplicationController.appCtrl.salvaSimulazione();
		}
    }//GEN-LAST:event_salvaButtonActionPerformed

    private void nuovaStanzaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuovaStanzaButtonActionPerformed
		// Chiede il  nome (e' possibile che l'utente prema cancel rinunciando all'operazione)
		NomeComandoDialog dia = new NomeComandoDialog(this.owner);
		dia.setVisible(true);

		if (dia.getValue() == JOptionPane.OK_OPTION) { // L'utente ha premuto Ok

			// Ottiene il nome inserito
			String nome = dia.getNome();

			if (nome.length() > 0) { // Il nome inserito e' non vuoto

				// Determina il piano a cui aggiungere la stanza
				Programma p = (Programma) programmiList.getSelectedValue();
				
				/* @OPERATIONaggiungiStanza
				 * in base a come si è gestito il caso di nome non valido, bisogna o catturare
				 * l'eccezione o verificare il valore restituito dall'operazione. In ogni
				 * caso si può mostrare una message dialog analoga a quella che qui viene visualizzata quando l'utente
				 * non inserisce NESSUN NOME.
				 */

				// @EXAMPLES T2/T3:
				// Stanza s = BackYardCtrl.aggiungiStanza(piano, nome);
				ComandoProgramma com=mySim.creaNuovoComando(nome, p);
                               

				if (com != null) // Alternativamente: se NON viene lanciata alcuna eccezione
				{
					/* @MODELINTERACTION la vista richiama sull'oggetto Piano
					 * il seguente metodo necessario al proprio aggiornamento 
					 * - getStanze(): ArrayList<Stanza>
					 */
					ArrayList<ComandoProgramma> comandi = p.getComandi();
					this.aggiornaElencoComandi(comandi);
				} else { // ALternativamente: se viene lanciata una eccezione
					JOptionPane.showMessageDialog(this, "Nome non disponibile", "Errore", JOptionPane.ERROR_MESSAGE);
				}

			} else { // Il nome inserito e' vuoto
				JOptionPane.showMessageDialog(this, "Nome stanza non valido", "Errore", JOptionPane.ERROR_MESSAGE);
			}
		}
    }//GEN-LAST:event_nuovaStanzaButtonActionPerformed

    private void eliminaStanzaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminaStanzaButtonActionPerformed
		// Ottiene stanza selezionata nell'elenco
                Programma p = (Programma) programmiList.getSelectedValue();
		ComandoProgramma com = (ComandoProgramma) comandiList.getSelectedValue();

		/* @OPERATIONeliminaStanza
		 * in base a come si è gestito il caso di stanza che non si può eliminare, bisogna o catturare
		 * l'eccezione o verificare il valore restituito dall'operazione. Qui in caso di valore restituito
		 * pari a false (piano non eliminabile) viene visualizzato un messaggio di errore.		
		 */
		// @EXAMPLES T2/T3:
		// boolean eliminato = BackYardCtrl.eliminaStanza(s);		
		boolean eliminato = mySim.cancellaComando(com.getNome(), p);

		// Aggiornamento view
		if (eliminato) {
			/* @MODELINTERACTION la vista richiama sull'oggetto Piano
			 * attualmente selezionato
			 * il seguente metodo necessario al proprio aggiornamento 
			 * - getStanze(): ArrayList<Stanza>
			 */

			// Ottiene il piano selezionato			
			ArrayList<ComandoProgramma> comandi = p.getComandi();
			this.aggiornaElencoComandi(comandi);

		} else {
			// Caso in cui il piano non è elimiminabile
			JOptionPane.showMessageDialog(this, "Non si può eliminare questo comando", "Errore", JOptionPane.ERROR_MESSAGE);
		}
    }//GEN-LAST:event_eliminaStanzaButtonActionPerformed

    private void modificaComandoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificaComandoButtonActionPerformed
		// Chiede il  nome (e' possibile che l'utente prema cancel rinunciando all'operazione)
                ComandoProgramma com = (ComandoProgramma) comandiList.getSelectedValue();
		ModificaComandoDialog dia = new ModificaComandoDialog(this.owner);
                dia.setNome(com.getNome());                
                ArrayList<Evento> eventi = this.mySim.ottieniListaEventi();
                ArrayList<AzioneComando> azioni = this.mySim.getAzioniComandoDisponibili();
                dia.setAzioni(azioni);   
                dia.setAzione(com.getAzioneComando());
                if(com.getAzioneComando() != null && com.getAzioneComando() instanceof Azione) dia.setDurata(com.getAzioneComando().getDurata());
                dia.setEventi(eventi);
                if(com.getCondizione()!= null){              
                    if(com.getCondizione() instanceof Evento){
                        dia.setEvento((Evento)com.getCondizione());  
                    }
                    else if(com.getCondizione() instanceof Orario){
                        dia.setOrario(((Orario)com.getCondizione()).toString());
                    }
                }
                
		dia.setVisible(true);

		if (dia.getValue() == JOptionPane.OK_OPTION) { // L'utente ha premuto Ok

			// Ottiene il nome inserito
			String nome = dia.getNome();
                        //Ottengo l'azione
                        AzioneComando az = dia.getAzione();
                        //Ottengo la durata
                        int durata = dia.getDurata();
                        //Ottengo la condizione di attivazione
                        Orario ora= dia.getOrario();
                        Evento ev = dia.getEvento();
                        
			if (nome.length() > 0 && az != null && durata >-1 && ((ora != null && (ora.validate() )|| ev!= null))) {                                
                                                            
				boolean modificato = mySim.cambiaNomeComando(com, nome);
                                boolean modAzione = false;
                                
                                if(az instanceof ProgrammaGenerico) modAzione= mySim.aggiungiSottoprogramma(com,(ProgrammaGenerico)az);
                                else modAzione= mySim.impostaAzione(com, az);
                                
                                if (modificato) {
                                    if(modAzione){
                                        mySim.impostaDurata(com, durata);      
                                        if(dia.isOraro())
                                            mySim.impostaCondizioneAttivazione(com, ora);
                                        else mySim.impostaCondizioneAttivazione(com, ev);
                                        
					Programma p = (Programma) programmiList.getSelectedValue();
					ArrayList<ComandoProgramma> comandi = p.getComandi();
					this.aggiornaElencoComandi(comandi);     
                                        this.comandiList.setSelectedValue(com, true);
                                    }
                                    else { // ALternativamente: se viene lanciata una eccezione
					JOptionPane.showMessageDialog(this, "Non puoi aggiungere ad un comando di un programma, lo stesso programma", "Errore", JOptionPane.ERROR_MESSAGE);
                                    }
				} else { // ALternativamente: se viene lanciata una eccezione
					JOptionPane.showMessageDialog(this, "Nome non disponibile ", "Errore", JOptionPane.ERROR_MESSAGE);
				}
			} else {
				JOptionPane.showMessageDialog(this, "Parametri non validi", "Errore", JOptionPane.ERROR_MESSAGE);
			}
		}
    }//GEN-LAST:event_modificaComandoButtonActionPerformed

    private void setAvvisoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setAvvisoButtonActionPerformed
        DispositivoIntelligente disp = (DispositivoIntelligente) this.dispIscrittiList.getSelectedValue();
        iscrizioneDialog dia  = new iscrizioneDialog(this.owner);
        dia.setDispositivo(disp.getNome());        
        dia.setEventi(mySim.getEventiAccessibili(disp));
        dia.setVisible(true);
        if (dia.getValue() == JOptionPane.OK_OPTION) {
            Evento ev = dia.getEvento();
            mySim.impostaAvvisi(disp, ev);
            this.aggiornaListaIscrizioni(disp);
        }
    }//GEN-LAST:event_setAvvisoButtonActionPerformed

    private void simulazioneTabbedStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_simulazioneTabbedStateChanged
		/* Questa operazione imposta la variabile contesto 
		 * all'Alloggio o al DispositivoIntelligente attualmente selezionato.
		 * ATTENZIONE che il contesto potrebbe anche essere null (se sono
		 * sul tab "Dispositivi" ma non c'è alcun dispositivo da selezionare)
		 */
		int tabIndex = ((JTabbedPane) evt.getSource()).getSelectedIndex();
		String tabName = ((JTabbedPane) evt.getSource()).getTitleAt(tabIndex);
		
    }//GEN-LAST:event_simulazioneTabbedStateChanged

    private void setAllarmeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setAllarmeButtonActionPerformed
        DispositivoIntelligente disp = (DispositivoIntelligente) this.dispIscrittiList.getSelectedValue();
        iscrizioneDialog dia  = new iscrizioneDialog(this.owner);
        dia.setDispositivo(disp.getNome());        
        dia.setEventi(mySim.getEventiAccessibili(disp));
        dia.setVisible(true);
        if (dia.getValue() == JOptionPane.OK_OPTION) {
            Evento ev = dia.getEvento();
            mySim.impostaAllarmi(disp, ev);
            this.aggiornaListaIscrizioni(disp);
        }
    }//GEN-LAST:event_setAllarmeButtonActionPerformed

    private void attivaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attivaButtonActionPerformed
        // TODO add your handling code here:
        Programma p = (Programma) programmiList.getSelectedValue();
        if(!p.isGenerico()) this.mySim.aggiungiASimulazione(p);
        ArrayList<Programma> prog = mySim.ottieniElencoProgrammi();
	this.aggiornaElencoProgrammi(prog);;
    }//GEN-LAST:event_attivaButtonActionPerformed

    private void iscrivitiButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iscrivitiButtonActionPerformed
        // TODO add your handling code here:
        DispositivoIntelligente disp= (DispositivoIntelligente)this.dispIscrittiList.getSelectedValue();
        mySim.aggiungiADispIscritti(disp.getNome());
        ArrayList<DispositivoIntelligente> dispositivi = mySim.ottieniElencoDispositivi();   
        this.dispIscrittiListValueChanged(null);
        
    }//GEN-LAST:event_iscrivitiButtonActionPerformed

    private void salvaProgrammaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salvaProgrammaButtonActionPerformed
        // TODO add your handling code here:
        Programma p = (Programma)this.programmiList.getSelectedValue();
        boolean salvato  = false;
        if(!p.isSalvato()){            
            salvato = p.salvaProgramma();
            if(!salvato)
                JOptionPane.showMessageDialog(this, "Devi prima salvare la simulazione!", "Errore", JOptionPane.ERROR_MESSAGE);
        }else{ 
            JOptionPane.showMessageDialog(this, "Non c'e' nulla da salvare", "Errore", JOptionPane.ERROR_MESSAGE);
	}
    }//GEN-LAST:event_salvaProgrammaButtonActionPerformed

    private void salvaComandoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salvaComandoButtonActionPerformed
        // TODO add your handling code here:
        ComandoProgramma com = (ComandoProgramma) this.comandiList.getSelectedValue();
        boolean salvato  = false;
        if(!com.isSalvato()){
            salvato = com.salvaComando();
            if(!salvato)
                JOptionPane.showMessageDialog(this, "Devi prima salvare il programma che lo contiene!", "Errore", JOptionPane.ERROR_MESSAGE);
        }else{ 
            JOptionPane.showMessageDialog(this, "Non c'e' nulla da salvare", "Errore", JOptionPane.ERROR_MESSAGE);
	}
    }//GEN-LAST:event_salvaComandoButtonActionPerformed

    private void attivaSimulazioneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attivaSimulazioneButtonActionPerformed
        // TODO add your handling code here:
         JOptionPane.showMessageDialog(this, "Funzione non ancora attivata", "Errore", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_attivaSimulazioneButtonActionPerformed

    private void dispIscrittiListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_dispIscrittiListValueChanged
        // TODO add your handling code here:   
        if(evt== null || evt.getValueIsAdjusting()){
            DispositivoIntelligente disp = (DispositivoIntelligente) this.dispIscrittiList.getSelectedValue();
            if(disp!= null){
                this.nomeDispLabel.setText("Nome: "+disp.getNome());
                this.collocDispLabel.setText("Collocazione: "+disp.getLuogo().getNome());
                this.aggiornaListaIscrizioni(disp);
                dispositivoP.setVisible(true);
            }
        }
        
    }//GEN-LAST:event_dispIscrittiListValueChanged

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel IscrizioneP;
    private javax.swing.JButton attivaButton;
    private javax.swing.JButton attivaSimulazioneButton;
    private javax.swing.JPanel blankPanel;
    private javax.swing.JButton chiudiButton;
    private javax.swing.JLabel collocDispLabel;
    private javax.swing.JList comandiList;
    private javax.swing.JLabel datiLabel;
    private javax.swing.JList dispIscrittiList;
    private javax.swing.JPanel dispositivoP;
    private javax.swing.JPanel editProgrammaP;
    private javax.swing.JPanel elencoDispositivi;
    private javax.swing.JPanel elencoProgrammi;
    private javax.swing.JButton eliminaProgrammaButton;
    private javax.swing.JButton eliminaStanzaButton;
    private javax.swing.JList eventiIscrizioneList;
    private javax.swing.JButton iscrivitiButton;
    private javax.swing.JPanel iscrizioniPanel;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JButton modificaComandoButton;
    private javax.swing.JButton modificaDatiButton;
    private javax.swing.JLabel nomeDispLabel;
    private javax.swing.JLabel nonIscrittoLabel;
    private javax.swing.JButton nuovaStanzaButton;
    private javax.swing.JButton nuovoProgrammaButton;
    private javax.swing.JPanel programmaP;
    private javax.swing.JPanel programmaPanel;
    private javax.swing.JList programmiList;
    private javax.swing.JButton salvaButton;
    private javax.swing.JButton salvaComandoButton;
    private javax.swing.JButton salvaProgrammaButton;
    private javax.swing.JPanel scenarioSP;
    private javax.swing.JButton setAllarmeButton;
    private javax.swing.JButton setAvvisoButton;
    private javax.swing.JTabbedPane simulazioneTabbed;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables

    private void aggiornaElencoProgrammi(ArrayList<Programma> programmi) {
        this.progListModel.removeAllElements();
        for (Programma p : programmi) {
                this.progListModel.addElement(p);
        }

        this.programmiList.clearSelection();
    }

    private void aggiornaElencoComandi(ArrayList<ComandoProgramma> comandi) {
        this.comListModel.removeAllElements();
        for (ComandoProgramma com : comandi) {
                this.comListModel.addElement(com);
                if(com.getCondizione() != null && com.getCondizione() instanceof Orario){
                    System.out.println(com.getCondizione());
                }
        }

        this.comandiList.clearSelection();
    }

    private void aggiornaElencoDispositivi(ArrayList<DispositivoIntelligente> dispositivi) {
        this.dispListModel.removeAllElements();
        for(DispositivoIntelligente disp: dispositivi){
            this.dispListModel.addElement(disp);
        }
        this.comandiList.clearSelection();
    }
    
    private void aggiornaListaIscrizioni(DispositivoIntelligente disp){
        boolean iscritto = false;     
        for(DispositivoIscritto in : mySim.ottieniListaDispIscritti()){           
            this.eventoListModel.removeAllElements();
            if(in.getDispositivo().equals(disp)){
                //Avvisi
                for(Entry<Evento,Boolean> ev : in.getIscrizioni().entrySet()){                    
                    if(ev.getValue())this.eventoListModel.addElement("<html><b style='color:green;backgroundColor:red'>Avviso</b>: "+ev.getKey());
                }
                //Allarmi
                for(Entry<Evento,Boolean> ev : in.getIscrizioni().entrySet()){                    
                    if(!ev.getValue())this.eventoListModel.addElement("<html><b style='color:red'>Allarme</b>: "+ev.getKey());                    
                }               
                iscritto = true;                
            }
        }
        this.iscrivitiButton.setEnabled(!iscritto);
        this.nonIscrittoLabel.setVisible(!iscritto);
        this.setAvvisoButton.setEnabled(iscritto);
        this.setAllarmeButton.setEnabled(iscritto);  
        this.eventiIscrizioneList.setVisible(iscritto);    
    }
}
